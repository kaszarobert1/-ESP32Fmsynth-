#include "EEPROM.h"

// Instantiate eeprom objects with parameter/argument names and sizes
// Eeprom objektumok példányosítása paraméter/argumentum nevekkel és méretekkel
EEPROMClass  MIDIsave("eeprom0");
#define EEPROMsize  2048   //  kel még ez a def!

#include <driver/i2s.h>
#define I2S_PORT I2S_NUM_0
#define I2S_DOUT      25
#define I2S_BCLK      27
#define I2S_LRC       26
#define IR_PIN        34

#define bufferLen 1024

size_t i2s_bytes_write = 0;
// i2s_write(I2S_PORT, &buffer,  buffermeret, &i2s_bytes_write, portMAX_DELAY);

void i2s_install() {
  // Set up I2S Processor configuration
  const i2s_config_t i2s_config = {
    .mode = i2s_mode_t(I2S_MODE_MASTER | I2S_MODE_TX ),
    .sample_rate = 48000,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT,
    // .communication_format =  ( i2s_comm_format_t )( I2S_COMM_FORMAT_STAND_MSB ),
    .communication_format = (i2s_comm_format_t)(I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB),
    //.communication_format = (i2s_comm_format_t)(I2S_COMM_FORMAT_I2S),
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL3,
    .dma_buf_count = 2,
    .dma_buf_len = bufferLen,
    .use_apll = false,


  };
  i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);
}

void i2s_setpin() {
  // Set I2S pin configuration
  const i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_BCLK ,
    .ws_io_num = I2S_LRC,
    .data_out_num = I2S_DOUT ,
    .data_in_num = IR_PIN
  };
  i2s_set_pin(I2S_PORT, &pin_config);
}

//Arduino Due fm polyphonic synthesizer 2019-2020 by Robert Laszlo Kasza
/*
  #pragma GCC push_options
  #pragma GCC optimize("Os")
*/

#include <MIDI.h>
//#include <MIDIUSB.h>
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);
uint ofset = 0x8000;
unsigned long starttime, stoptime, eltelttime, eltelttime2 ;

//audio
long portamento = 0;
const uint16_t audiobuffersize = bufferLen / 2;
uint16_t buffermeret = audiobuffersize;
//Az fm audiobufferem
int32_t bufferbe;
short buffer[audiobuffersize];
uint16_t bufferindex;


//effect
uint16_t delaybuffersize = 8192;
uint16_t reverbtime = delaybuffersize;
uint16_t reverbtime2 = delaybuffersize;
byte delaystep = 0;
byte delay2step = 0;
byte delaytime = 4;
byte delay2time = 2;
int16_t delaybuffer[8192];
int16_t delaybuffer2[8192];
uint16_t elozodelaybufferindex;
uint16_t elozodelaybufferindex2;
uint16_t elozoelozodelaybufferindex;
uint16_t elozoelozodelaybufferindex2;
uint16_t delaybufferindex = 0;
uint16_t delaybufferindex2 = 1;
byte reverblevel = 65;
byte reverblevel2 = 32;
byte reverbdiffusion = 23;
byte choruslevel = 3;
byte chorusfreq = 0;
uint16_t chorusalg = 64;
byte level = 4;
long y;
long y2;
long y3;
long y4;
long y5;
long y6;
long y7;
long y8;
long y9;
long y10;
long delay3;
long delay4;
int freq1 = 0;
int freq2 = 10000;
float f0orig = 100;
float f0 = 100;
float Q = 2;
byte Qp = 50;
float f02 = 100;
float f02orig = 100;
float Q2 = 2;
byte Q2p = 50;
byte pareqfreq0;
byte pareqfreq1;
uint16_t eqvalue = 125 * 96;
bool parametereqlefton = false;
bool parametereqrighton = false;
bool delaylowpasseqlefton = true;
bool delaylowpasseqrighton = true;
bool highpassrighteqon = false;
bool highpasslefteqon = false;
bool limiterrighton = false;
bool limiterlefton = false;
byte limitgain = 127;
byte limitgain2 = 127;
int limitplus = 32767;
int limitminus = -limitplus;
int limitplus2 = 32767;
int limitminus2 = -limitplus2;
int limitplus3 = 32767;
int limitminus3 = -limitplus3;
byte revalg = 8;
//tva
int gorbetime[8] = { -1, -1, -1, -1, -1, -1, -1, -1};
uint16_t maxrelease = 0;
uint16_t maxtime = 0;
uint16_t maxrelease0 = 0;
uint16_t maxrelease1 = 0;
uint16_t maxrelease2 = 0;
uint16_t maxrelease3 = 0;
uint16_t maxrelease4 = 0;
uint16_t maxrelease5 = 0;
uint16_t maxtime0 = 0;
uint16_t maxtime1 = 0;
uint16_t maxtime2 = 0;
uint16_t maxtime3 = 0;
uint16_t maxtime4 = 0;
uint16_t maxtime5 = 0;
byte oplevel = 1;
byte released = 2;
//controll
byte gomb1 = 2;
byte gomb2 = 3;
byte gomb3 = 4;
byte gomb4 = 5;
byte gomb5 = 6;
byte gomb6 = 7;
byte gomb7 = 8;
byte gomb8 = 9;
byte stepprogchanged = 0;
bool inc = false;
bool dec = false;
byte menuoldal = 1;
byte opmenuoldal = 1;
//feedback
long old0[8];
long old1[8];
byte feedbacklevel = 7;
long  average = 0;
//midi
byte generatornumber = 1;
uint32_t noteertek[128];
byte midichan = 1;

//initprogramparameter
byte program = 0;
byte alg = 1;
byte alg2 = 1;
#define GORBE_SIZE  2048
//const uint16_t  GORBE_SIZE =16284;
uint16_t op1gorbe[GORBE_SIZE];
uint16_t op2gorbe[GORBE_SIZE];
uint16_t op3gorbe[GORBE_SIZE];
uint16_t op5gorbe[GORBE_SIZE];
uint16_t op4gorbe[GORBE_SIZE];
uint16_t op6gorbe[GORBE_SIZE];
int16_t pichgorbe[GORBE_SIZE];
long op1level[8];
long op2level[8];
long op3level[8];
long op4level[8];
long op5level[8];
long op6level[8];
uint16_t op1veloc = 64;
uint16_t op2veloc = 64;
uint16_t op3veloc = 64;
uint16_t op4veloc = 64;
uint16_t op5veloc = 64;
uint16_t op6veloc = 64;
uint16_t  waveveloc[8] = {64, 64, 64, 64, 64, 64, 64, 64};
//byte opwaweform[6];
byte  op1waveform = 1;
byte  op2waveform = 1;
byte  op3waveform = 1;
byte  op5waveform = 1;
byte  op4waveform = 1;
byte  op6waveform = 1;
byte szorzo = 10;
bool op1 = true;
bool op2 = true;
bool op3 = true;
bool op4 = true;
bool op5 = true;
bool op6 = true;
String ops = "111111";
byte op1al = 40;
byte op1ar = 1;
byte op1d1l = 20;
byte op1d1r = 2;
byte op1d2l = 30;
byte op1d2r = 10;
byte op1rl = 30;
byte op1rr = 39;
byte op2al = 40;
byte op2ar = 20;
byte op2d1l = 20;
byte op2d1r = 2;
byte op2d2l = 30;
byte op2d2r = 10;
byte op2rl = 0;
byte op2rr = 20;
byte op3al = 40;
byte op3ar = 20;
byte op3d1l = 20;
byte op3d1r = 2;
byte op3d2l = 30;
byte op3d2r = 10;
byte op3rl = 0;
byte op3rr = 20;
byte op5al = 40;
byte op5ar = 20;
byte op5d1l = 20;
byte op5d1r = 2;
byte op5d2l = 30;
byte op5d2r = 10;
byte op5rl = 0;
byte op5rr = 20;
byte op4al = 40;
byte op4ar = 0;
byte op4d1l = 20;
byte op4d1r = 2;
byte op4d2l = 30;
byte op4d2r = 10;
byte op4rl = 0;
byte op4rr = 10;
byte op6al = 40;
byte op6ar = 0;
byte op6d1l = 20;
byte op6d1r = 2;
byte op6d2l = 30;
byte op6d2r = 10;
byte op6rl = 0;
byte op6rr = 10;
byte pichkezd = 63;
byte pichal = 6;
byte pichar = 10;
byte pichd1l = 20;
byte pichd1r = 2;
byte pichd2l = 30;
byte pichd2r = 10;
byte pichrl = 1;
byte pichrr = 30;
bool op1notefixed = true;
bool op2notefixed = true;
bool op3notefixed = true;
bool op4notefixed = true;
bool op5notefixed = true;
bool op6notefixed = true;
byte op1generatorfreqfixp = 10;
byte op2generatorfreqfixp = 10;
byte op3generatorfreqfixp = 10;
byte op5generatorfreqfixp = 10;
byte op4generatorfreqfixp = 10;
byte op6generatorfreqfixp = 10;
//freqfixp<--freqfixp>>15
uint32_t op1generatorfreqfix = 327680;
uint32_t op2generatorfreqfix = 327680;
uint32_t op3generatorfreqfix = 327680;
uint32_t op5generatorfreqfix = 327680;
uint32_t op4generatorfreqfix = 327680;
uint32_t op6generatorfreqfix = 327680;

byte op1volume;
byte op1volumeorig;
byte op2volume;
byte op2volumeorig;
byte op3volume;
byte op3volumeorig;
byte op4volume;
byte op4volumeorig;
byte op5volume;
byte op5volumeorig;
byte op6volume;
byte op6volumeorig;
byte op1generatorfreq;
byte op1generatorfreqorig;
byte op2generatorfreq;
byte op2generatorfreqorig;
byte op3generatorfreq;
byte op3generatorfreqorig;
byte op4generatorfreq;
byte op4generatorfreqorig;
byte op5generatorfreq;
byte op5generatorfreqorig;
byte op6generatorfreq;
byte op6generatorfreqorig;
int32_t op1detune = 0;
int32_t op2detune = 0;
int32_t op3detune = 0;
int32_t op4detune = 0;
int32_t op5detune = 0;
int32_t op6detune = 0;
byte op1detunep = 0;
byte op2detunep = 0;
byte op3detunep = 0;
byte op4detunep = 0;
byte op5detunep = 0;
byte op6detunep = 0;
String pachname;
byte frame = 8;
byte modulation = 0;
byte mastertune = 64;
byte pichvolume = 0;
byte algorithm = 27;

unsigned long ido;
unsigned long elozoido = 0;
unsigned long elozoinit = 0;
byte commandByte;
byte noteByte;
byte velocityByte;
byte oldnoteByte[8];
#define FG_SIZE  1024
#define FG_SIZE_I  FG_SIZE - 1

//waveform 16db
//1. sinushigh


//rithm
//int16_t fmharomszogfg[1024] =  {-5581, -5245, -5013, -4835, -4670, -4510, -4386, -4368, -4536, -4951, -5634, -6550, -7617, -8728, -9768, -10640, -11268, -11602, -11616, -11313, -10736, -9966, -9141, -8425, -7963, -7856, -8150, -8813, -9734, -10741, -11640, -12262, -12499, -12336, -11852, -11197, -10544, -10049, -9813, -9868, -10173, -10644, -11177, -11677, -12083, -12360, -12492, -12470, -12302, -12013, -11626, -11188, -10745, -10364, -10078, -9907, -9826, -9791, -9772, -9727, -9637, -9564, -9571, -9691, -9986, -10405, -10878, -11260, -11458, -11376, -10955, -10242, -9344, -8404, -7598, -7113, -6970, -7057, -7305, -7641, -8151, -8781, -9432, -9973, -10300, -10353, -10121, -9684, -9205, -8877, -8843, -9116, -9549, -9883, -9852, -9312, -8330, -7266, -6456, -6116, -6285, -6811, -7412, -7800, -7791, -7382, -6754, -6200, -6014, -6383, -7321, -8666, -10140, -11439, -12325, -12698, -12589, -12128, -11482, -10778, -10051, -9264, -8313, -7105, -5619, -4049, -2656, -1742, -1558, -2196, -3541, -5289, -7032, -8395, -9166, -9352, -9200, -9073, -9292, -10015, -11132, -12313, -13134, -13200, -12302, -10505, -8139, -5706, -3738, -2654, -2654, -3681, -5469, -7600, -9614, -11102, -11791, -11589, -10603, -9115, -7508, -6199, -5579, -5835, -6929, -8638, -10585, -12248, -13217, -13257, -12348, -10686, -8630, -6436, -4463, -3003, -2215, -2117, -2628, -3588, -4781, -5979, -7017, -7835, -8470, -8995, -9459, -9823, -9956, -9680, -8862, -7502, -5785, -4099, -2848, -2330, -2662, -3744, -5295, -6945, -8340, -9242, -9577, -9433, -9006, -8529, -8193, -8098, -8244, -8549, -8903, -9210, -9425, -9560, -9652, -9727, -9753, -9629, -9196, -8295, -6830, -4832, -2471, -38, 2134, 3752, 4636, 4743, 4135, 2918, 1175, -1065, -3799, -6976, -10405, -13709, -16353, -17754, -17467, -15355, -11698, -7172, -2708, 750, 2498, 2260, 252, -2898, -6341, -9245, -10997, -11327, -10317, -8328, -5859, -3420, -1421, -121, 388, 155, -653, -1800, -3010, -4022, -4626, -4712, -4296, -3521, -2628, -1904, -1610, -1926, -2911, -4492, -6485, -8629, -10622, -12163, -12985, -12883, -11754, -9625, -6685, -3285, 93, 2907, 4661, 5018, 3894, 1474, -1725, -5090, -8006, -9996, -10818, -10503, -9315, -7662, -5979, -4610, -3744, -3385, -3391, -3543, -3636, -3543, -3257, -2881, -2577, -2503, -2747, -3287, -3991, -4701, -5222, -5423, -5278, -4881, -4424, -4125, -4161, -4604, -5381, -6292, -7050, -7357, -6985, -5839, -3995, -1695, 695, 2759, 4120, 4531, 3935, 2486, 508, -1589, -3418, -4724, -5450, -5740, -5871, -6133, -6703, -7545, -8393, -8823, -8402, -6862, -4250, -977, 2242, 4571, 5302, 4083, 1066, -3093, -7393, -10754, -12324, -11719, -9128, -5245, -1052, 2466, 4596, 5063, 4062, 2057, -280, -2305, -3612, -4052, -3682, -2675, -1238, 427, 2103, 3529, 4398, 4397, 3308, 1118, -1912, -5208, -8256, -10398, -11119, -10197, -7786, -4389, -734, 2411, 4439, 5050, 4309, 2607, 541, -1258, -2287, -2295, -1332, 296, 2120, 3638, 4437, 4280, 3224, 1487, -571, -2547, -4076, -4910, -4959, -4292, -3104, -1654, -206, 1023, 1895, 2349, 2398, 2096, 1535, 816, 57, -628, -1146, -1436, -1490, -1352, -1102, -828, -592, -410, -244, -32, 285, 732, 1287, 1898, 2508, 3084, 3625, 4135, 4584, 4867, 4791, 4118, 2645, 319, -2673, -5891, -8697, -10411, -10493, -8714, -5245, -647, 4255, 8564, 11522, 12665, 11911, 9529, 6058, 2163, -1497, -4373, -6076, -6437, -5490, -3432, -584, 2658, 5853, 8558, 10376, 11022, 10382, 8529, 5810, 2733, -139, -2308, -3449, -3493, -2625, -1240, 179, 1192, 1533, 1181, 359, -536, -1068, -898, 106, 1841, 3996, 6127, 7776, 8560, 8271, 6920, 4736, 2109, -491, -2605, -3866, -4057, -3188, -1454, 801, 3143, 5154, 6523, 7067, 6819, 5982, 4855, 3738, 2858, 2313, 2072, 2027, 2057, 2085, 2102, 2146, 2268, 2492, 2795, 3126, 3447, 3769, 4167, 4746, 5585, 6692, 7938, 9089, 9850, 9965, 9284, 7816, 5721, 3268, 776, -1488, -3243, -4287, -4489, -3801, -2273, -75, 2509, 5099, 7283, 8692, 9087, 8415, 6837, 4697, 2466, 659, -271, -14, 1514, 4126, 7363, 10554, 12942, 13865, 12938, 10199, 6171, 1819, -1860, -4017, -4180, -2399, 781, 4480, 7757, 9877, 10501, 9740, 8068, 6131, 4535, 3690, 3731, 4537, 5836, 7284, 8565, 9436, 9749, 9447, 8547, 7154, 5357, 3313, 1242, -517, -1618, -1831, -1018, 747, 3178, 5821, 8154, 9707, 10181, 9532, 7980, 5959, 3986, 2544, 1970, 2389, 3720, 5721, 8055, 10360, 12289, 13542, 13892, 13223, 11570, 9157, 6382, 3761, 1808, 893, 1130, 2341, 4105, 5899, 7261, 7925, 7873, 7294, 6478, 5690, 5101, 4763, 4652, 4797, 5163, 5719, 6405, 7106, 7674, 7784, 7287, 6225, 4870, 3671, 3081, 3410, 4710, 6740, 9032, 11036, 12279, 12489, 11645, 9954, 7766, 5478, 3597, 2240, 1532, 1546, 2301, 3732, 5651, 7736, 9588, 10824, 11208, 10734, 9634, 8297, 7123, 6389, 6163, 6315, 6630, 6924, 7129, 7312, 7625, 8203, 9072, 10103, 11047, 11604, 11539, 10765, 9382, 7657, 5949, 4628, 3975, 4129, 5050, 6530, 8237, 9779, 10792, 11027, 10404, 9045, 7252, 5434, 4009, 3309, 3508, 4593, 6373, 8529, 10675, 12428, 13463, 13576, 12730, 11086, 8990, 6913, 5356, 4710, 5125, 6442, 8222, 9867, 10812, 10714, 9572, 7740, 5807, 4393, 3929, 4515, 5894, 7550, 8906, 9534, 9305, 8434, 7388, 6728, 6901, 8100, 10159, 12618, 14875, 16377, 16767, 15971, 14181, 11773, 9188, 6825, 4956, 3710, 3101, 3013, 3309, 3889, 4721, 5809, 7144, 8634, 10084, 11220, 11773, 11576, 10650, 9220, 7668, 6416, 5804, 5998, 6958, 8474, 10253, 11990, 13442, 14439, 14856, 14658, 13870, 12528, 10784, 8877, 7174, 5993, 5528, 5775, 6534, 7472, 8242, 8602, 8488, 8007, 7365, 6769, 6353, 6158, 6169, 6380, 6846, 7669, 8942, 10655, 12629, 14506, 15835, 16219, 15432, 13521, 10803, 7786, 5025, 2988, 1960, 2019, 3064, 4877, 7177, 9657, 12005, 13911, 15105, 15406, 14782, 13388, 11560, 9742, 8386, 7822, 8157, 9238, 10685, 11986, 12643, 12292, 10857, 8539, 5776, 3147, 1225, 439, 961, 2662, 5146, 7861, 10250, 11908, 12682, 12686, 12197, 11643, 11321, 11322, 11522, 11653, 11436, 10702, 9465, 7917, 6360, 5099, 4354, 4211, 4631, 5486, 6614, 7855, 9077, 10174, 11067, 11696, 12032, 12070, 11830, 11339, 10628, 9730, 8703, 7652, 6745, 6194, 6202, 6872, 8140, 9747, 11283, 12303, 12477, 11706, 10175, 8277, 6503, 5271, 4797, 5059, 5857, 6926, 8054, 9147, 10214, 11286, 12317, 13138, 13475, 13048, 11705, 9528, 6859, 4240, 2266, 1409, 1888, 3603, 6169, 9014, 11522, 13202, 13751, 13120, 11512, 9331, 7084, 5269, 4258, 4205, 5016, 6370, 7824, 8946, 9449, 9280, 8625, 7836, 7302, 7312, 7954, 9103, 10462, 11669, 12412, 12510, 11945, 10844, 9428, 7949, 6620, 5633, 5096, 5049, 5452, 6193, 7103, 7986, 8661, 9005, 8970, 8597, 7997, 7331, 6784, 6534, 6720, 7408, 8550, 9934, 11218, 12044, 12083, 11216, 9529, 7326, 5056, 3194, 2104, 1944, 2632, 3885, 5335, 6646, 7612, 8199, 8511, 8709, 8938, 9236, 9536, 9717, 9671, 9368, 8881, 8367, 8004, 7929, 8182, 8694, 9309, 9833, 10087, 9952, 9392, 8450, 7242, 5940, 4741, 3838, 3391, 3483, 4097 };
//5. ohh squarelow
//6 basic waveform: Sine, Small Sine, Triangle, ShawTooth,Square,Noice
int16_t sinusfg[FG_SIZE];
int16_t fmsinusfg[FG_SIZE];
int16_t haromszogfg[FG_SIZE];
//int16_t fmharomszogfg[FG_SIZE];
int16_t fureszfg[FG_SIZE];
//int16_t fmfureszfg[FG_SIZE];
int16_t negyszogfg[FG_SIZE];
//int16_t fmnegyszogfg[FG_SIZE];
int16_t zajfg[FG_SIZE];
//wavetable1: Lowpiano
int16_t wavetable1fg[FG_SIZE] = { -3575, -1886, -465, 685, 1713, 2812, 4193, 5956, 7974, 10011, 11912, 13554, 14833, 15661, 15961, 15713, 14893, 13499, 11604, 9447, 7443, 5870, 4830, 4304, 4146, 4129, 4144, 4285, 4665, 5399, 6491, 7740, 8738, 9257, 9234, 8786, 8144, 7555, 7139, 6851, 6656, 6457, 6137, 5483, 4424, 2911, 1006, -1167, -3380, -5354, -6948, -8066, -8747, -9081, -9286, -9547, -9879, -10139, -10141, -9683, -8634, -7202, -5710, -4466, -3652, -3362, -3513, -3884, -4289, -4698, -5144, -5765, -6764, -8222, -10061, -12084, -13994, -15443, -16169, -16222, -15741, -14872, -13751, -12578, -11614, -11015, -10797, -10864, -10963, -10743, -10031, -8913, -7606, -6291, -5230, -4540, -4231, -4271, -4638, -5362, -6430, -7816, -9349, -10840, -12198, -13271, -14010, -14415, -14539, -14430, -14084, -13528, -12787, -12000, -11334, -10842, -10517, -10170, -9556, -8451, -6962, -5388, -4003, -3087, -2696, -2586, -2436, -2130, -1686, -1206, -846, -685, -647, -675, -658, -563, -344, -55, 305, 682, 1069, 1403, 1615, 1650, 1567, 1495, 1558, 1913, 2617, 3632, 4734, 5744, 6422, 6574, 6136, 5242, 4078, 2752, 1367, 25, -1238, -2496, -3812, -5255, -6845, -8480, -9866, -10723, -10993, -10749, -10241, -9797, -9627, -9603, -9541, -9264, -8684, -7777, -6621, -5301, -3823, -2268, -726, 559, 1396, 1799, 1861, 1739, 1585, 1516, 1396, 969, 28, -1507, -3493, -5435, -6807, -7401, -7267, -6712, -6156, -6032, -6295, -6705, -6982, -6871, -6207, -5154, -3985, -2947, -2174, -1768, -1824, -2272, -2924, -3539, -3932, -3920, -3489, -2863, -2358, -2133, -2249, -2663, -3202, -3621, -3818, -3726, -3405, -2909, -2426, -2026, -1683, -1293, -749, 96, 1227, 2512, 3707, 4636, 5142, 5058, 4416, 3427, 2406, 1600, 1242, 1453, 2038, 2702, 3246, 3667, 4028, 4471, 5095, 5903, 6861, 7927, 9020, 10037, 10862, 11507, 12021, 12502, 13125, 14091, 15437, 16992, 18527, 19804, 20658, 21065, 21170, 21089, 20926, 20725, 20550, 20425, 20299, 20068, 19650, 18999, 18151, 17165, 16162, 15247, 14493, 13989, 13740, 13732, 13803, 13881, 13884, 13746, 13432, 12962, 12418, 11838, 11264, 10699, 10118, 9512, 8952, 8478, 8190, 8125, 8336, 8768, 9317, 9909, 10430, 10817, 11089, 11373, 11774, 12254, 12824, 13372, 13892, 14377, 14802, 15135, 15320, 15316, 15155, 14994, 14965, 15123, 15416, 15714, 15736, 15358, 14561, 13451, 12195, 11057, 10239, 9769, 9522, 9380, 9154, 8724, 8097, 7438, 6853, 6376, 5951, 5426, 4647, 3563, 2256, 767, -782, -2179, -3146, -3560, -3423, -2867, -2134, -1495, -1095, -951, -1047, -1361, -1810, -2264, -2591, -2730, -2702, -2621, -2642, -2935, -3465, -4099, -4665, -4983, -5000, -4855, -4823, -5023, -5513, -6259, -7216, -8264, -9303, -10200, -10870, -11233, -11283, -11127, -10874, -10627, -10380, -10140, -9806, -9347, -8796, -8237, -7796, -7656, -7939, -8509, -9098, -9468, -9447, -9045, -8469, -7966, -7615, -7411, -7271, -7124, -7043, -7204, -7697, -8487, -9387, -10102, -10477, -10653, -10825, -11181, -11735, -12325, -12586, -12434, -11931, -11305, -10837, -10855, -11428, -12367, -13466, -14542, -15464, -16193, -16747, -17108, -17197, -16928, -16266, -15254, -14037, -12744, -11386, -9936, -8320, -6617, -5115, -4082, -3698, -3918, -4438, -4727, -4430, -3512, -2148, -654, 489, 959, 784, 175, -593, -1275, -1648, -1763, -1857, -2135, -2724, -3635, -4742, -5687, -6129, -5874, -4825, -3069, -931, 1111, 2682, 3623, 3918, 3763, 3489, 3381, 3472, 3677, 3891, 4037, 4128, 4253, 4529, 5004, 5751, 6761, 7961, 9125, 9996, 10301, 9795, 8356, 6265, 4062, 2164, 790, 64, -136, -110, -112, -183, -292, -383, -344, -161, 92, 266, 243, -129, -852, -1749, -2593, -3238, -3563, -3534, -3169, -2555, -1760, -870, -63, 377, 225, -439, -1359, -2273, -2947, -3297, -3423, -3527, -3687, -3877, -3949, -3708, -3024, -1999, -742, 611, 1899, 2940, 3582, 3770, 3487, 2735, 1530, -44, -1773, -3390, -4725, -5661, -6177, -6345, -6336, -6209, -6007, -5699, -5283, -4809, -4460, -4363, -4550, -4960, -5315, -5255, -4614, -3463, -1971, -312, 1372, 2939, 4316, 5444, 6272, 6701, 6592, 5892, 4763, 3449, 2177, 1163, 600, 459, 675, 1175, 1957, 2992, 4266, 5637, 6881, 7799, 8236, 8183, 7771, 7300, 6960, 6831, 6883, 7050, 7174, 7088, 6745, 6176, 5457, 4751, 4218, 3934, 3854, 3908, 4048, 4223, 4395, 4508, 4525, 4475, 4428, 4565, 5041, 5878, 6928, 8069, 9154, 10150, 11060, 11941, 12802, 13601, 14239, 14486, 14164, 13212, 11728, 9865, 7895, 6153, 4866, 4062, 3665, 3486, 3306, 2853, 1996, 664, -1120, -3265, -5474, -7324, -8514, -9074, -9193, -9123, -9126, -9268, -9309, -8991, -8146, -6735, -4971, -3256, -1952, -1148, -813, -733, -627, -257, 390, 1266, 2255, 3240, 4080, 4705, 5095, 5242, 5145, 4881, 4679, 4803, 5347, 6247, 7331, 8372, 9083, 9463, 9640, 9792, 10065, 10538, 11137, 11691, 12073, 12182, 11921, 11280, 10387, 9462, 8643, 7964, 7347, 6651, 5748, 4675, 3534, 2430, 1476, 774, 357, 172, 181, 372, 750, 1259, 1750, 2079, 2147, 1917, 1397, 691, -78, -848, -1607, -2412, -3335, -4359, -5303, -5961, -6247, -6188, -6024, -6094, -6643, -7608, -8811, -9985, -10791, -11112, -11056, -10789, -10422, -9981, -9490, -8991, -8578, -8261, -8010, -7736, -7325, -6709, -5993, -5332, -4888, -4850, -5354, -6248, -7229, -8048, -8597, -8877, -9084, -9511, -10254, -11237, -12276, -13078, -13346, -13028, -12345, -11528, -10787, -10276, -10067, -10107, -10288, -10481, -10486, -10134, -9396, -8480, -7623, -6970, -6595, -6512, -6583, -6650, -6624, -6539, -6466, -6554, -6926, -7556, -8310, -9000, -9313, -8853, -7495, -5461, -3071, -636, 1550, 3244, 4426, 5201, 5716, 6114, 6585, 7224, 8001, 8721, 9203, 9254, 8745, 7707, 6401, 5084, 3890, 2846, 1903, 885, -268, -1589, -2973, -4326, -5398, -6051, -6273, -6197, -5931, -5580, -5190, -4785, -4362, -3915, -3432, -2902, -2375, -1907, -1578, -1462, -1616, -2107, -2906, -3797, -4543, -4993, -5128, -5027, -4783, -4482, -4096, -3642, -3161, -2722, -2427, -2252, -2142, -2077, -2086, -2241, -2597, -3161, -3821, -4414, -4784, -4806, -4481, -3997, -3504, -3146, -3004, -3132, -3462, -3761, -3943, -3903, -3670, -3374, -3207, -3331, -3711, -4324, -4998, -5586, -5895, -5902, -5569, -4939, -4080, -3202, -2488, -1989, -1663, -1452, -1250, -1091, -969, -926, -889, -830, -716, -588, -497, -439, -399, -301, -107, 184, 410, 428, 149, -401, -1093, -1699, -2042, -2046, -1708, -1033, -71, 1113, 2426, 3863, 5401, 7033, 8740, 10491, 12282, 14071, 15785, 17310, 18486, 19201, 19468, 19365, 19041, 18732, 18624, 18726, 18865, 18904, 18698, 18184, 17393, 16422, 15411, 14491, 13819, 13544, 13705, 14124, 14588, 14928, 15026, 14862, 14625, 14582, 14834, 15352, 15944, 16245, 15940, 14974, 13488, 11690, 9905, 8501, 7623, 7139, 6864, 6681, 6607, 6743, 7221, 7986, 8951, 10027, 11164, 12283, 13243, 13940, 14304, 14359, 14213, 14079, 14201, 14664, 15433, 16397, 17270, 17762, 17767, 17351, 16673, 15907, 15226, 14681, 14148, 13503, 12645, 11619, 10585, 9794, 9358, 9226, 9304, 9488, 9648, 9676, 9492, 9069, 8340, 7278, 5937, 4503, 3185, 2108, 1336, 839, 488, 188, -40 };
//wavetable1: Sinth
int16_t wavetable2fg[FG_SIZE] =  { -279, -195, -110, -25, 60, 144, 226, 308, 388, 467, 544, 621, 697, 772, 848, 924, 1002, 1079, 1159, 1239, 1320, 1401, 1484, 1567, 1651, 1734, 1817, 1899, 1981, 2062, 2142, 2222, 2300, 2378, 2456, 2533, 2610, 2686, 2763, 2840, 2917, 2994, 3072, 3150, 3228, 3306, 3384, 3462, 3541, 3619, 3697, 3776, 3854, 3933, 4011, 4090, 4169, 4248, 4328, 4406, 4485, 4564, 4642, 4719, 4796, 4872, 4948, 5022, 5095, 5168, 5241, 5312, 5383, 5453, 5524, 5594, 5664, 5735, 5806, 5877, 5948, 6020, 6092, 6164, 6237, 6310, 6383, 6455, 6528, 6600, 6673, 6745, 6818, 6890, 6962, 7035, 7107, 7181, 7254, 7328, 7402, 7476, 7550, 7624, 7698, 7771, 7844, 7916, 7988, 8058, 8128, 8197, 8265, 8333, 8400, 8466, 8533, 8600, 8668, 8736, 8805, 8876, 8947, 9020, 9094, 9169, 9245, 9322, 9400, 9478, 9557, 9635, 9714, 9792, 9870, 9948, 10025, 10102, 10178, 10254, 10331, 10407, 10484, 10562, 10640, 10719, 10798, 10879, 10959, 11041, 11122, 11204, 11286, 11367, 11448, 11529, 11609, 11688, 11768, 11845, 11923, 12001, 12078, 12156, 12233, 12310, 12389, 12468, 12547, 12627, 12706, 12787, 12867, 12948, 13028, 13107, 13185, 13263, 13340, 13416, 13490, 13564, 13637, 13708, 13780, 13850, 13921, 13993, 14063, 14134, 14206, 14279, 14352, 14424, 14497, 14570, 14643, 14716, 14790, 14863, 14936, 15008, 15081, 15153, 15223, 15294, 15364, 15433, 15503, 15571, 15640, 15708, 15776, 15845, 15913, 15981, 16049, 16118, 16186, 16254, 16321, 16389, 16455, 16522, 16588, 16654, 16720, 16785, 16849, 16914, 16978, 17043, 17107, 17171, 17235, 17300, 17365, 17430, 17495, 17561, 17627, 17692, 17758, 17824, 17890, 17956, 18021, 18086, 18150, 18214, 18277, 18339, 18401, 18461, 18520, 18578, 18635, 18692, 18747, 18801, 18855, 18907, 18960, 19011, 19062, 19114, 19166, 19217, 19270, 19322, 19376, 19431, 19486, 19542, 19599, 19657, 19716, 19774, 19833, 19891, 19949, 20006, 20063, 20118, 20172, 20225, 20277, 20328, 20377, 20426, 20475, 20524, 20573, 20623, 20673, 20725, 20777, 20831, 20885, 20941, 20998, 21055, 21113, 21171, 21229, 21287, 21343, 21399, 21454, 21508, 21560, 21611, 21661, 21710, 21758, 21806, 21853, 21900, 21947, 21994, 22041, 22090, 22137, 22185, 22233, 22282, 22330, 22376, 22422, 22468, 22512, 22555, 22596, 22636, 22675, 22712, 22749, 22784, 22818, 22852, 22885, 22919, 22953, 22986, 23020, 23054, 23088, 23123, 23158, 23193, 23229, 23264, 23299, 23334, 23368, 23403, 23437, 23471, 23504, 23537, 23569, 23601, 23632, 23662, 23692, 23722, 23751, 23780, 23809, 23836, 23863, 23890, 23915, 23941, 23966, 23991, 24017, 24041, 24066, 24092, 24117, 24143, 24170, 24196, 24223, 24244, 24265, 24286, 24307, 24328, 24349, 24369, 24389, 24409, 24429, 24448, 24468, 24487, 24507, 24527, 24547, 24567, 24588, 24609, 24630, 24652, 24673, 24694, 24715, 24735, 24754, 24773, 24790, 24807, 24822, 24837, 24851, 24864, 24877, 24889, 24901, 24913, 24924, 24936, 24949, 24961, 24973, 24985, 24998, 25011, 25022, 25034, 25046, 25058, 25069, 25079, 25089, 25099, 25107, 25115, 25122, 25128, 25134, 25139, 25143, 25147, 25149, 25152, 25154, 25155, 25156, 25155, 25154, 25153, 25151, 25149, 25145, 25141, 25136, 25129, 25122, 25113, 25103, 25091, 25077, 25063, 25046, 25028, 25007, 24985, 24962, 24937, 24909, 24881, 24850, 24818, 24785, 24751, 24715, 24678, 24639, 24599, 24558, 24516, 24472, 24427, 24381, 24334, 24284, 24234, 24181, 24128, 24072, 24015, 23956, 23895, 23832, 23767, 23700, 23632, 23562, 23490, 23417, 23342, 23265, 23188, 23108, 23028, 22947, 22865, 22781, 22697, 22612, 22525, 22437, 22349, 22259, 22169, 22077, 21983, 21889, 21793, 21696, 21598, 21498, 21397, 21295, 21191, 21086, 20980, 20872, 20764, 20654, 20544, 20432, 20320, 20207, 20093, 19978, 19863, 19746, 19629, 19511, 19391, 19271, 19150, 19028, 18906, 18782, 18657, 18532, 18406, 18279, 18152, 18024, 17896, 17767, 17638, 17509, 17380, 17251, 17122, 16993, 16864, 16735, 16606, 16477, 16348, 16219, 16089, 15960, 15829, 15698, 15566, 15434, 15301, 15167, 15029, 14891, 14751, 14611, 14470, 14328, 14186, 14043, 13899, 13754, 13610, 13465, 13320, 13174, 13029, 12884, 12739, 12594, 12450, 12305, 12162, 12017, 11874, 11730, 11586, 11441, 11296, 11151, 11005, 10858, 10711, 10562, 10412, 10261, 10109, 9956, 9801, 9645, 9487, 9328, 9168, 9007, 8844, 8681, 8517, 8353, 8188, 8022, 7856, 7689, 7523, 7355, 7188, 7019, 6850, 6681, 6510, 6339, 6166, 5992, 5816, 5639, 5460, 5280, 5098, 4915, 4730, 4544, 4357, 4167, 3977, 3786, 3593, 3400, 3206, 3011, 2816, 2619, 2423, 2226, 2029, 1831, 1634, 1436, 1238, 1040, 842, 644, 446, 247, 48, -151, -350, -550, -751, -952, -1153, -1356, -1560, -1766, -1971, -2177, -2385, -2594, -2804, -3014, -3224, -3436, -3647, -3858, -4069, -4280, -4491, -4701, -4910, -5119, -5327, -5535, -5742, -5948, -6154, -6360, -6565, -6770, -6974, -7178, -7383, -7587, -7792, -7996, -8201, -8405, -8609, -8813, -9018, -9222, -9426, -9629, -9832, -10034, -10236, -10438, -10638, -10838, -11038, -11236, -11434, -11631, -11828, -12024, -12220, -12415, -12611, -12806, -13001, -13196, -13390, -13584, -13779, -13973, -14167, -14360, -14553, -14746, -14938, -15130, -15322, -15513, -15703, -15893, -16083, -16272, -16461, -16650, -16838, -17027, -17215, -17403, -17591, -17779, -17967, -18155, -18342, -18529, -18715, -18902, -19087, -19271, -19454, -19636, -19817, -19996, -20166, -20334, -20500, -20665, -20829, -20991, -21151, -21310, -21468, -21626, -21782, -21938, -22094, -22249, -22404, -22560, -22715, -22871, -23026, -23181, -23336, -23491, -23645, -23798, -23950, -24101, -24250, -24398, -24545, -24688, -24830, -24969, -25106, -25241, -25374, -25504, -25632, -25759, -25883, -26006, -26128, -26247, -26366, -26483, -26600, -26715, -26830, -26943, -27055, -27166, -27275, -27383, -27489, -27593, -27695, -27794, -27891, -27986, -28078, -28167, -28253, -28336, -28417, -28495, -28570, -28642, -28712, -28779, -28844, -28907, -28968, -29028, -29086, -29143, -29197, -29251, -29303, -29354, -29403, -29450, -29496, -29540, -29581, -29621, -29658, -29693, -29725, -29755, -29782, -29807, -29830, -29851, -29869, -29885, -29900, -29913, -29925, -29935, -29944, -29952, -29958, -29963, -29967, -29969, -29970, -29969, -29967, -29964, -29959, -29953, -29945, -29936, -29927, -29916, -29904, -29892, -29879, -29865, -29851, -29837, -29823, -29808, -29793, -29778, -29763, -29747, -29730, -29713, -29696, -29678, -29659, -29639, -29617, -29595, -29572, -29548, -29523, -29496, -29470, -29442, -29413, -29384, -29354, -29323, -29293, -29261, -29229, -29196, -29163, -29130, -29096, -29061, -29026, -28990, -28953, -28915, -28877, -28839, -28798, -28758, -28718, -28677, -28636, -28594, -28553, -28512, -28470, -28430, -28391, -28352, -28314, -28276, -28239, -28203, -28167, -28132, -28096, -28061, -28025, -27989, -27954, -27918, -27880, -27843, -27805, -27766, -27727, -27687, -27648, -27608, -27568, -27528, -27485, -27442, -27399, -27355, -27312, -27270, -27226, -27183, -27139, -27095, -27050, -27003, -26958, -26911, -26864, -26817, -26770, -26723, -26677, -26632, -26587, -26543, -26501, -26460, -26420, -26381, -26344, -26306, -26270, -26234, -26198, -26163, -26127, -26091, -26053, -26015, -25976, -25935, -25893, -25850, -25806, -25761, -25714, -25667, -25620, -25571, -25522, -25473, -25422, -25372, -25322, -25271, -25220, -25168, -25116, -25063, -25010, -24955, -24900, -24844, -24787, -24728, -24669 };
//3. low piano2
int16_t wavetable3fg[1024] =  {0, 1, 1, -1, -3, -7, -11, -17, -23, -30, -38, -44, -51, -57, -64, -67, -70, -72, -73, -72, -69, -66, -61, -55, -48, -40, -31, -23, -15, -7, 1, 6, 9, 11, 11, 4, -5, -17, -32, -53, -77, -103, -129, -154, -180, -204, -227, -241, -252, -260, -265, -256, -244, -228, -208, -179, -147, -114, -79, -44, -10, 23, 55, 75, 92, 106, 116, 114, 107, 99, 87, 67, 44, 21, -4, -31, -58, -86, -115, -144, -174, -205, -236, -268, -301, -335, -369, -403, -437, -472, -506, -535, -563, -589, -614, -630, -644, -656, -666, -667, -666, -664, -661, -657, -653, -650, -647, -647, -648, -649, -650, -652, -653, -654, -653, -648, -640, -631, -620, -603, -585, -566, -546, -525, -504, -483, -461, -438, -414, -389, -363, -333, -302, -268, -232, -185, -135, -82, -25, 38, 104, 172, 241, 314, 388, 463, 538, 610, 681, 751, 819, 873, 923, 969, 1009, 1025, 1035, 1037, 1034, 1007, 974, 936, 895, 848, 800, 752, 707, 676, 650, 629, 615, 628, 648, 677, 712, 771, 837, 905, 976, 1047, 1116, 1181, 1242, 1273, 1296, 1308, 1310, 1265, 1207, 1137, 1054, 927, 787, 635, 471, 266, 51, -175, -409, -664, -924, -1187, -1451, -1697, -1939, -2173, -2396, -2561, -2711, -2845, -2960, -3000, -3020, -3021, -3004, -2917, -2813, -2694, -2562, -2387, -2204, -2014, -1819, -1624, -1430, -1240, -1056, -908, -768, -639, -519, -439, -368, -304, -247, -211, -178, -147, -117, -86, -54, -20, 17, 67, 122, 181, 244, 323, 405, 490, 576, 663, 748, 832, 912, 975, 1032, 1082, 1125, 1134, 1135, 1127, 1111, 1062, 1005, 939, 866, 763, 654, 540, 421, 294, 167, 39, -87, -200, -309, -413, -513, -589, -661, -728, -792, -847, -900, -953, -1005, -1058, -1112, -1168, -1226, -1290, -1357, -1424, -1492, -1554, -1615, -1672, -1725, -1756, -1781, -1799, -1808, -1782, -1746, -1700, -1645, -1553, -1453, -1344, -1228, -1088, -940, -787, -628, -450, -267, -79, 114, 320, 530, 743, 957, 1171, 1385, 1597, 1808, 2002, 2193, 2379, 2560, 2715, 2864, 3007, 3143, 3254, 3358, 3457, 3550, 3620, 3684, 3742, 3793, 3809, 3816, 3813, 3798, 3735, 3658, 3568, 3464, 3310, 3145, 2960, 2768, 2554, 2335, 2114, 1892, 1670, 1449, 1230, 1015, 814, 617, 424, 236, 65, -101, -262, -418, -551, -677, -796, -907, -984, -1053, -1112, -1164, -1185, -1200, -1210, -1217, -1219, -1222, -1229, -1243, -1287, -1340, -1401, -1472, -1570, -1674, -1780, -1887, -1981, -2069, -2148, -2216, -2232, -2235, -2224, -2200, -2124, -2036, -1937, -1828, -1687, -1540, -1390, -1238, -1091, -947, -809, -678, -585, -503, -434, -380, -388, -412, -452, -506, -620, -748, -889, -1043, -1243, -1453, -1671, -1897, -2141, -2387, -2634, -2878, -3103, -3322, -3533, -3735, -3893, -4040, -4175, -4298, -4371, -4432, -4481, -4519, -4512, -4495, -4467, -4429, -4354, -4271, -4180, -4084, -3973, -3860, -3747, -3635, -3536, -3440, -3349, -3263, -3195, -3132, -3072, -3016, -2966, -2918, -2869, -2817, -2751, -2680, -2603, -2519, -2403, -2278, -2145, -2003, -1824, -1635, -1437, -1231, -994, -750, -502, -251, 4, 258, 510, 759, 990, 1215, 1434, 1644, 1819, 1985, 2141, 2289, 2400, 2503, 2598, 2684, 2742, 2793, 2838, 2878, 2901, 2922, 2940, 2957, 2974, 2991, 3009, 3027, 3047, 3068, 3090, 3114, 3144, 3177, 3210, 3243, 3275, 3307, 3336, 3362, 3372, 3376, 3371, 3357, 3297, 3224, 3137, 3036, 2879, 2708, 2525, 2331, 2098, 1857, 1610, 1359, 1099, 838, 577, 319, 77, -160, -390, -612, -793, -963, -1122, -1267, -1363, -1446, -1517, -1577, -1597, -1609, -1614, -1615, -1606, -1596, -1587, -1580, -1585, -1593, -1605, -1622, -1657, -1698, -1744, -1795, -1871, -1954, -2044, -2143, -2280, -2427, -2587, -2760, -2990, -3235, -3494, -3767, -4090, -4424, -4768, -5120, -5496, -5875, -6256, -6635, -6994, -7344, -7683, -8006, -8252, -8477, -8679, -8855, -8930, -8980, -9005, -9006, -8922, -8818, -8698, -8565, -8391, -8207, -8018, -7824, -7619, -7412, -7207, -7006, -6832, -6667, -6514, -6374, -6295, -6231, -6183, -6150, -6172, -6206, -6250, -6303, -6375, -6450, -6525, -6597, -6650, -6698, -6737, -6768, -6759, -6740, -6710, -6669, -6585, -6492, -6391, -6284, -6165, -6047, -5933, -5825, -5759, -5704, -5665, -5640, -5682, -5740, -5815, -5907, -6063, -6233, -6418, -6614, -6854, -7103, -7361, -7624, -7904, -8186, -8468, -8747, -9006, -9258, -9500, -9730, -9904, -10063, -10205, -10328, -10374, -10401, -10407, -10393, -10298, -10181, -10045, -9889, -9657, -9406, -9138, -8855, -8516, -8166, -7807, -7442, -7060, -6676, -6294, -5917, -5563, -5217, -4880, -4554, -4267, -3989, -3721, -3462, -3233, -3012, -2796, -2585, -2390, -2197, -2005, -1812, -1611, -1405, -1195, -979, -735, -484, -223, 48, 360, 684, 1017, 1362, 1748, 2144, 2549, 2962, 3401, 3846, 4295, 4744, 5193, 5639, 6082, 6519, 6927, 7329, 7721, 8105, 8457, 8803, 9143, 9481, 9813, 10145, 10478, 10812, 11153, 11495, 11838, 12182, 12526, 12868, 13209, 13546, 13866, 14182, 14492, 14795, 15068, 15333, 15590, 15836, 16035, 16220, 16390, 16541, 16608, 16652, 16669, 16659, 16527, 16362, 16163, 15930, 15554, 15143, 14697, 14217, 13607, 12967, 12299, 11605, 10827, 10031, 9224, 8410, 7594, 6782, 5981, 5196, 4492, 3812, 3161, 2540, 2050, 1595, 1175, 790, 548, 341, 168, 29, 12, 23, 59, 114, 228, 352, 479, 605, 704, 792, 865, 922, 906, 872, 819, 748, 613, 463, 300, 126, -84, -299, -518, -735, -933, -1122, -1299, -1459, -1545, -1610, -1651, -1668, -1587, -1485, -1362, -1223, -1030, -828, -619, -407, -193, 18, 223, 418, 565, 698, 814, 911, 931, 929, 906, 861, 730, 578, 406, 216, -41, -313, -598, -893, -1221, -1555, -1892, -2229, -2555, -2876, -3187, -3486, -3721, -3937, -4129, -4294, -4339, -4351, -4330, -4274, -4078, -3848, -3584, -3288, -2870, -2424, -1953, -1460, -890, -304, 297, 911, 1571, 2239, 2915, 3597, 4292, 4988, 5682, 6372, 7031, 7680, 8315, 8935, 9483, 10013, 10524, 11016, 11440, 11847, 12239, 12618, 12948, 13268, 13578, 13879, 14146, 14405, 14654, 14893, 15084, 15260, 15420, 15559, 15602, 15619, 15606, 15560, 15375, 15155, 14897, 14605, 14178, 13719, 13233, 12723, 12129, 11519, 10894, 10258, 9589, 8916, 8241, 7570, 6931, 6305, 5698, 5114, 4649, 4219, 3828, 3480, 3313, 3194, 3123, 3099, 3256, 3456, 3695, 3970, 4368, 4794, 5243, 5711, 6239, 6775, 7315, 7853, 8354, 8841, 9307, 9747, 10063, 10345, 10588, 10793, 10837, 10841, 10808, 10738, 10539, 10311, 10057, 9781, 9430, 9061, 8680, 8287, 7860, 7428, 6994, 6561, 6152, 5751, 5363, 4993, 4702, 4433, 4189, 3970, 3853, 3759, 3688, 3637, 3651, 3680, 3718, 3763, 3826, 3890, 3954, 4014, 4051, 4081, 4101, 4108, 4062, 4003, 3930, 3844, 3713};
int16_t wavetable4fg[FG_SIZE] =  { -1202, -1473, -1166, -1537, -1130, -1593, -1096, -1641, -1063, -1680, -1030, -1710, -999, -1729, -968, -1737, -939, -1735, -910, -1723, -881, -1700, -850, -1671, -819, -1633, -787, -1587, -753, -1534, -719, -1474, -683, -1408, -646, -1338, -606, -1264, -565, -1186, -520, -1105, -473, -1022, -422, -938, -369, -852, -312, -766, -253, -679, -190, -592, -125, -504, -57, -416, 13, -329, 86, -241, 159, -152, 234, -64, 309, 25, 385, 114, 460, 203, 534, 293, 606, 383, 676, 472, 744, 562, 810, 650, 872, 739, 932, 826, 989, 911, 1043, 995, 1093, 1075, 1141, 1154, 1186, 1228, 1228, 1299, 1269, 1366, 1307, 1428, 1343, 1485, 1379, 1537, 1414, 1585, 1449, 1626, 1483, 1663, 1519, 1694, 1555, 1721, 1592, 1744, 1631, 1763, 1671, 1779, 1714, 1792, 1758, 1803, 1805, 1813, 1854, 1823, 1905, 1833, 1958, 1844, 2014, 1857, 2071, 1872, 2129, 1890, 2190, 1912, 2251, 1939, 2313, 1969, 2376, 2003, 2439, 2043, 2502, 2087, 2564, 2135, 2626, 2187, 2688, 2244, 2748, 2303, 2807, 2366, 2865, 2430, 2921, 2496, 2976, 2563, 3028, 2631, 3079, 2697, 3127, 2763, 3173, 2827, 3217, 2888, 3257, 2946, 3296, 3000, 3332, 3050, 3365, 3095, 3395, 3134, 3423, 3167, 3448, 3195, 3470, 3216, 3487, 3231, 3501, 3241, 3513, 3244, 3524, 3241, 3532, 3233, 3538, 3219, 3543, 3199, 3547, 3176, 3550, 3147, 3552, 3116, 3554, 3080, 3556, 3042, 3559, 3003, 3562, 2963, 3566, 2923, 3573, 2884, 3580, 2845, 3590, 2807, 3602, 2771, 3617, 2736, 3635, 2704, 3655, 2673, 3679, 2645, 3705, 2620, 3735, 2597, 3768, 2577, 3804, 2560, 3843, 2546, 3884, 2535, 3928, 2527, 3974, 2522, 4021, 2521, 4070, 2523, 4120, 2529, 4170, 2538, 4221, 2551, 4271, 2568, 4321, 2588, 4370, 2613, 4418, 2641, 4466, 2673, 4511, 2708, 4555, 2747, 4598, 2790, 4639, 2836, 4679, 2884, 4717, 2936, 4754, 2989, 4791, 3045, 4826, 3103, 4862, 3162, 4898, 3222, 4933, 3283, 4970, 3345, 5007, 3406, 5045, 3467, 5084, 3527, 5124, 3587, 5166, 3645, 5209, 3702, 5253, 3758, 5299, 3811, 5346, 3863, 5395, 3913, 5444, 3962, 5494, 4009, 5545, 4053, 5597, 4097, 5649, 4139, 5700, 4179, 5752, 4217, 5803, 4255, 5854, 4291, 5904, 4325, 5952, 4359, 6000, 4391, 6046, 4422, 6090, 4451, 6133, 4480, 6173, 4507, 6212, 4532, 6249, 4556, 6284, 4579, 6318, 4601, 6349, 4620, 6380, 4639, 6408, 4656, 6436, 4671, 6463, 4686, 6489, 4701, 6516, 4715, 6541, 4728, 6568, 4743, 6595, 4758, 6623, 4774, 6653, 4792, 6700, 4825, 6749, 4861, 6799, 4902, 6852, 4948, 6907, 4999, 6965, 5056, 7024, 5119, 7085, 5188, 7149, 5265, 7215, 5347, 7281, 5437, 7350, 5533, 7419, 5636, 7489, 5745, 7560, 5859, 7630, 5978, 7701, 6102, 7771, 6230, 7840, 6361, 7909, 6494, 7977, 6629, 8044, 6765, 8109, 6901, 8175, 7036, 8240, 7169, 8304, 7299, 8368, 7427, 8432, 7550, 8496, 7669, 8561, 7782, 8627, 7890, 8694, 7992, 8763, 8087, 8834, 8175, 8906, 8256, 8981, 8330, 9059, 8395, 9138, 8454, 9220, 8505, 9303, 8548, 9388, 8584, 9475, 8612, 9562, 8633, 9649, 8647, 9736, 8654, 9822, 8655, 9906, 8649, 9988, 8638, 10067, 8621, 10141, 8599, 10211, 8572, 10276, 8541, 10334, 8507, 10387, 8469, 10432, 8428, 10470, 8386, 10501, 8342, 10525, 8297, 10541, 8252, 10550, 8208, 10553, 8165, 10549, 8124, 10539, 8085, 10525, 8050, 10506, 8019, 10484, 7993, 10461, 7972, 10435, 7957, 10409, 7948, 10384, 7947, 10360, 7952, 10339, 7966, 10321, 7987, 10308, 8017, 10299, 8055, 10296, 8101, 10299, 8155, 10309, 8217, 10325, 8287, 10348, 8364, 10377, 8448, 10413, 8537, 10456, 8632, 10504, 8733, 10558, 8837, 10617, 8944, 10680, 9053, 10746, 9164, 10816, 9276, 10887, 9386, 10960, 9496, 11033, 9603, 11106, 9707, 11177, 9806, 11247, 9901, 11314, 9990, 11378, 10075, 11438, 10153, 11493, 10224, 11542, 10287, 11585, 10341, 11622, 10386, 11653, 10423, 11677, 10450, 11694, 10468, 11703, 10477, 11706, 10476, 11701, 10466, 11690, 10448, 11672, 10420, 11647, 10385, 11615, 10342, 11577, 10292, 11533, 10235, 11484, 10173, 11429, 10107, 11370, 10036, 11306, 9962, 11237, 9886, 11166, 9809, 11091, 9732, 11015, 9656, 10936, 9581, 10856, 9510, 10776, 9441, 10696, 9378, 10618, 9320, 10540, 9267, 10465, 9221, 10393, 9183, 10323, 9151, 10258, 9128, 10197, 9112, 10140, 9104, 10089, 9104, 10042, 9112, 10002, 9127, 9967, 9148, 9937, 9176, 9913, 9209, 9894, 9247, 9880, 9288, 9872, 9333, 9867, 9380, 9867, 9427, 9871, 9475, 9878, 9522, 9888, 9567, 9900, 9609, 9914, 9647, 9928, 9680, 9943, 9708, 9958, 9729, 9973, 9745, 9987, 9752, 9999, 9753, 10009, 9745, 10018, 9730, 10024, 9707, 10027, 9676, 10027, 9637, 10024, 9592, 10018, 9538, 10009, 9479, 9996, 9414, 9979, 9343, 9959, 9267, 9935, 9187, 9907, 9104, 9876, 9018, 9841, 8930, 9803, 8840, 9761, 8750, 9715, 8661, 9666, 8571, 9614, 8483, 9559, 8397, 9500, 8313, 9439, 8233, 9375, 8155, 9308, 8082, 9240, 8013, 9169, 7949, 9097, 7889, 9023, 7835, 8949, 7787, 8874, 7744, 8800, 7708, 8725, 7678, 8651, 7654, 8579, 7636, 8509, 7625, 8436, 7620, 8367, 7621, 8299, 7628, 8236, 7641, 8175, 7661, 8117, 7686, 8063, 7716, 8013, 7752, 7966, 7792, 7923, 7836, 7884, 7884, 7848, 7935, 7815, 7989, 7784, 8044, 7756, 8100, 7730, 8157, 7704, 8212, 7680, 8266, 7655, 8318, 7629, 8365, 7602, 8409, 7573, 8448, 7541, 8481, 7505, 8507, 7465, 8526, 7421, 8537, 7371, 8539, 7315, 8533, 7253, 8517, 7184, 8492, 7109, 8457, 7026, 8413, 6937, 8358, 6841, 8295, 6737, 8222, 6627, 8142, 6511, 8052, 6388, 7955, 6260, 7852, 6127, 7742, 5989, 7626, 5846, 7506, 5699, 7383, 5550, 7255, 5398, 7126, 5243, 6995, 5087, 6864, 4930, 6732, 4772, 6600, 4614, 6469, 4455, 6340, 4298, 6213, 4141, 6088, 3984, 5965, 3829, 5845, 3674, 5728, 3521, 5612, 3368, 5500, 3217, 5389, 3066, 5281, 2917, 5175, 2768, 5071, 2620, 4967, 2473, 4865, 2327, 4763, 2180, 4662, 2035, 4560, 1889, 4458, 1745, 4355, 1600, 4250, 1455, 4144, 1311, 4035, 1167, 3924, 1024, 3811, 880, 3695, 737, 3576, 595, 3453, 453, 3327, 312, 3198, 172, 3066, 33, 2930, -106, 2791, -242, 2649, -377, 2504, -511, 2358, -643, 2209, -773, 2058, -901, 1906, -1026, 1753, -1149, 1601, -1269, 1448, -1385, 1297, -1499, 1148, -1610, 1000, -1716, 856, -1820, 715, -1919, 577, -2013, 444, -2104, 317, -2190, 195, -2272, 80, -2349, -28, -2423, -129, -2492, -222, -2557, -307, -2620, -387, -2679, -458, -2734, -520, -2785, -573, -2832, -618, -2875, -653, -2915, -680, -2951, -699, -2984, -711, -3013, -715, -3040, -713, -3063, -705, -3085, -692, -3104, -675, -3121, -655, -3137, -632, -3151, -608, -3165, -583, -3177, -559, -3188, -536, -3199, -516, -3209, -498};
//Doublesinus
int16_t duplafg[FG_SIZE];
//Triplasinus
int16_t triplafg[FG_SIZE];
//loaded wawform
int16_t generator1[FG_SIZE];
int16_t generator2[FG_SIZE];
int16_t generator3[FG_SIZE];
int16_t generator4[FG_SIZE];
int16_t generator5[FG_SIZE];
int16_t generator6[FG_SIZE];
//int16_t generator7[FG_SIZE];
//int16_t generator8[FG_SIZE];
//byte lfoarray[64] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1,};
//byte lfoarray[256] =  {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 255, 252, 248, 244, 240, 236, 232, 228, 224, 220, 216, 212, 208, 204, 200, 196, 192, 188, 184, 180, 176, 172, 168, 164, 160, 156, 152, 148, 144, 140, 136, 132, 128, 124, 120, 116, 112, 108, 104, 100, 96, 92, 88, 84, 80, 76, 72, 68, 64, 60, 56, 52, 48, 44, 40, 36, 32, 28, 24, 20, 16, 12, 8, 4, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 144, 148, 152, 156, 160, 164, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 236, 240, 244, 248, 252, 255, 252, 248, 244, 240, 236, 232, 228, 224, 220, 216, 212, 208, 204, 200, 196, 192, 188, 184, 180, 176, 172, 168, 164, 160, 156, 152, 148, 144, 140, 136, 132, 128, 124, 120, 116, 112, 108, 104, 100, 96, 92, 88, 84, 80, 76, 72, 68, 64, 60, 56, 52, 48, 44, 40, 36, 32, 28, 24, 20, 16, 12, 8, 4 };
uint16_t lfoarray[512] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 255, 254, 253, 252, 251, 250, 249, 248, 247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159, 158, 157, 156, 155, 154, 153, 152, 151, 150, 149, 148, 147, 146, 145, 144, 143, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127, 126, 125, 124, 123, 122, 121, 120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
uint32_t lfo1arrayindex = 0;
byte lfo1freq = 0;
byte lfo1volume = 0;
uint32_t lfo2arrayindex = 0;
byte lfo2freq = 0;
byte lfo2volume = 8;
byte lfo2tempvolume = 8;
uint32_t lfo2value = 0;
byte lfo2delaytime = 20;
byte lfo2delay = 0;
byte oplfo = 1;

int16_t fixfreqstep;
uint16_t volume = 1024;
int32_t pich[54] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
uint32_t sinewaveptr[54] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
uint32_t expgains128[128] = {0, 1, 2, 3, 4, 5, 6, 11, 16, 23, 32, 42, 55, 70, 88, 108, 132, 158, 188, 221, 258, 298, 343, 392, 445, 504, 566, 634, 708, 786, 870, 961, 1057, 1159, 1267, 1383, 1505, 1633, 1770, 1913, 2064, 2223, 2389, 2564, 2747, 2939, 3139, 3349, 3567, 3795, 4032, 4279, 4535, 4802, 5079, 5366, 5665, 5973, 6293, 6625, 6967, 7321, 7688, 8066, 8456, 8858, 9274, 9702, 10142, 10597, 11064, 11545, 12040, 12548, 13071, 13608, 14160, 14726, 15308, 15904, 16516, 17143, 17786, 18444, 19119, 19810, 20517, 21242, 21982, 22740, 23516, 24308, 25118, 25947, 26793, 27657, 28539, 29441, 30361, 31299, 32258, 33235, 34232, 35249, 36285, 37342, 38419, 39517, 40635, 41775, 42935, 44117, 45320, 46545, 47791, 49060, 50351, 51664, 53001, 54359, 55741, 57147, 58575, 60027, 61504, 63004, 64430, 65535 };
uint32_t sinewave1freq;
uint32_t sinewave2freq;
uint32_t sinewave3freq;
uint32_t sinewave4freq;
uint32_t sinewave5freq;
uint32_t sinewave6freq;
uint32_t sinewave7freq;
uint32_t sinewave8freq;
uint32_t sinewave9freq;
uint32_t sinewave10freq;
uint32_t sinewave11freq;
uint32_t sinewave12freq;
uint32_t sinewave13freq;
uint32_t sinewave14freq;
uint32_t sinewave15freq;
uint32_t sinewave16freq;
uint32_t sinewave17freq;
uint32_t sinewave18freq;
uint32_t sinewave19freq;
uint32_t sinewave20freq;
uint32_t sinewave21freq;
uint32_t sinewave22freq;
uint32_t sinewave23freq;
uint32_t sinewave24freq;
uint32_t sinewave25freq;
uint32_t sinewave26freq;
uint32_t sinewave27freq;
uint32_t sinewave28freq;
uint32_t sinewave29freq;
uint32_t sinewave30freq;
uint32_t sinewave31freq;
uint32_t sinewave32freq;
uint32_t sinewave33freq;
uint32_t sinewave34freq;
uint32_t sinewave35freq;
uint32_t sinewave36freq;
uint32_t sinewave37freq;
uint32_t sinewave38freq;
uint32_t sinewave39freq;
uint32_t sinewave40freq;
uint32_t sinewave41freq;
uint32_t sinewave42freq;
uint32_t sinewave43freq;
uint32_t sinewave44freq;
uint32_t sinewave45freq;
uint32_t sinewave46freq;
uint32_t sinewave47freq;
uint32_t sinewave48freq;
uint32_t sinewave49freq;
uint32_t sinewave50freq;
uint32_t sinewave51freq;
uint32_t sinewave52freq;
uint32_t sinewave53freq;
uint32_t sinewave54freq;
uint32_t wavefreq[8];
uint32_t picheglevel = 16384;
byte op1pich = 0;
byte op2pich = 0;
byte op3pich = 0;
byte op4pich = 0;
byte op5pich = 0;
byte op6pich = 0;
//nullátmenet
bool signwaveop1 = false;
bool signwaveop1last = false;
uint16_t lastop1level[8];
//lfo
int szamlalo = 0;
byte lcdfreq = 2;


//bufferbe = y + delaybuffer[(delaybufferindex + lfo1volume) % reverbtime];
#define yadddelay(bufferbe,delaybufferindex,lfovolume,reverbtime) (bufferbe + delaybuffer[(delaybufferindex + lfo1volume) % reverbtime])
#define yadddelay2(bufferbe,delaybufferindex2,lfovolume,reverbtime2) (bufferbe + delaybuffer[(delaybufferindex2 + lfo1volume) % reverbtime2])
// y = (freq1 * y + freq2 * bufferbe) >> 14;
#define equalizer(y, freq1, freq2, bufferbe)((freq1 * y + freq2 * bufferbe)/10000)
#define equalizer2(y2, freq1, freq2, bufferbe)((freq1 * y2 + freq2 * bufferbe)/10000)
//(reverblevel2 - 1) * bufferbe / reverblevel2
#define reverblevel1gain(reverblevel, bufferbe)((reverblevel - 1) * bufferbe / reverblevel)
#define reverblevel2gain(reverblevel2, bufferbe)((reverblevel2 - 1) * bufferbe / reverblevel2)
#define equqlizerdelay1(y3,freq1,freq2,elozodelaybufferindex) ((freq1 * y3 + freq2 * delaybuffer[elozodelaybufferindex])/11500)
#define equqlizerdelay2(y4,freq1,freq2,elozodelaybufferindex2) ((freq1 * y4 + freq2 * delaybuffer[elozodelaybufferindex2])/11500)
uint16_t op0gorbeteszt[GORBE_SIZE];
uint16_t tesztmutato = 0;
//1+2modulator
bool fagy = true;
byte op1lep = 22;
byte op2lep = 22;
byte op3lep = 22;
byte op4lep = 22;
byte op5lep = 22;
byte op6lep = 22;

//opgenerator A B C D E F
/*
  #define egyopgenA(freqmutato1,op1level,lep)  (generator1[freqmutato1 >> lep] *op1level)
  #define egyopgenB(freqmutato2,op2level,lep)  (generator2[freqmutato2 >> lep] *op2level)
  #define egyopgenC(freqmutato3,op3level,lep)  (generator3[freqmutato3 >> lep] *op3level)
  #define egyopgenD(freqmutato4,op4level,lep)  (generator4[freqmutato4 >> lep] *op4level)
  #define egyopgenE(freqmutato5,op5level,lep)  (generator5[freqmutato5 >> lep] *op5level)
  #define egyopgenF(freqmutato6,op6level,lep)  (generator6[freqmutato6 >> lep] *op6level)
*/


long egyopgenA(uint32_t freqmutato1, long op1level, byte lep)
{
  return generator1[freqmutato1 >> lep] * op1level;
}
long egyopgenB(uint32_t freqmutato2, long op2level, byte lep)
{
  return generator2[freqmutato2 >> lep] * op2level;
}
long egyopgenC(uint32_t freqmutato3, long op3level, byte lep)
{
  return generator3[freqmutato3 >> lep] * op3level;
}
long egyopgenD(uint32_t freqmutato4, long op4level, byte lep)
{
  return generator4[freqmutato4 >> lep] * op4level;
}
long egyopgenE(uint32_t freqmutato5, long op5level, byte lep)
{
  return generator5[freqmutato5 >> lep] * op5level;
}
long egyopgenF(uint32_t freqmutato6, long op6level, byte lep)
{
  return generator6[freqmutato6 >> lep] * op6level;
}

//probamidi
struct Serial2MIDISettings : public midi::DefaultSettings
{
  static const long BaudRate = 31250;
  static const int8_t RxPin  = 16;
  static const int8_t TxPin  = 17;
};

MIDI_CREATE_CUSTOM_INSTANCE(HardwareSerial, Serial2, MIDI2, Serial2MIDISettings);


//esp teszt
#define BUTTON_PIN 23
#define RXD2 16
#define TXD2 17
#include <MIDI.h>

void setup() {
  Serial.begin(115200);
  Serial.println("i2s Setup begin....");
  delay(1000);
  // Set up I2S
  i2s_install();
  i2s_setpin();

  i2s_start(I2S_PORT);
  Serial.println("i2s Completed!");
  delay(100);

  pinMode(BUTTON_PIN, INPUT_PULLUP);
  /*
    pinMode(gomb1, INPUT);
    pinMode(gomb2, INPUT);
    pinMode(gomb3, INPUT);
    pinMode(gomb4, INPUT);
    pinMode(gomb5, INPUT);
    pinMode(gomb6, INPUT);
    pinMode(gomb7, INPUT);
    pinMode(gomb8, INPUT);
  */
  //Wire.setClock(1000000);
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("   FM-DuoX7   ");
  delay(600);
  lcd.setCursor(0, 1);
  lcd.print("  DigitalSynth  ");
  delay(600);
  lcd.setCursor(0, 0);
  lcd.print(" Firmvare: 0.41 ");
  lcd.setCursor(0, 1);
  lcd.print("                ");
  delay(10);
  //Serial2.begin(31250, SERIAL_8N1, RXD2, TXD2);
  MIDI2.begin(MIDI_CHANNEL_OMNI);


  // EEPROM init
  if (!MIDIsave.begin(1800)) {
    Serial.println("Failed to initialise MIDIsave");
    Serial.println("Restarting...");
    delay(1000);
    ESP.restart();
  }
  // maxtime = maxtime;
  op1gorbeinit();
  op2gorbeinit();
  op3gorbeinit();
  op5gorbeinit();
  op4gorbeinit();
  op6gorbeinit();
  pichgorbeinit();
  hangokinit();
  sinusinit();
  fmsinusinit();
  haromszoginit();
  fureszoginit();
  negyszoginit();
  zajinit();
  duplafginit();
  triplafginit();
  //pwminit();
  programchange(program);
  //setuptest();
  // lfo2test();
}
//----------loop----------------

void loop() {
  while (true) {
    ido = micros();
    serialEvent();
    // serialEventUSB();
    if (ido - elozoido > frame << 9) {
      elozoido = ido;
      if (szamlalo >= lcdfreq) {
        vezerlok(); //read buttons and ptenciometers, controlled the button system
        initprog(); //Step initialize, and refrish lcd end controlled generator system!!!
        szamlalo = 0;
      } else {
        if (szamlalo == 1)
        {
          //lfo generator step (chorus):
          //lfo1volume = (lfoarray[lfoarrayindex >> 22] >> choruslevel << 1) << 1;
          // lfo1volume = (((lfoarray[lfoarrayindex >> 22]) >> choruslevel) << 1 ) + 2 ;
          //lfoarrayindex += chorusfreq << 18;
          //Serial.print(lfo1volume);
          //Serial.print(".");

          //  op3volume = op3volumeorig + lfoarray[lfo2arrayindex >> 1] >> lfo2volume;

          if (lfo2delay > lfo2delaytime) {
           // lfo2tempvolume = lfo2volume;
            lfo2value = lfoarray[lfo2arrayindex >> 23];            
            lfo2arrayindex += lfo2freq << 22;
          }else{
              lfo2value=0;
            }      
          pichband();
          lfo2delay++;

          // lfo2value = (lfoarray[lfo2arrayindex >> 23] * lfo2tempvolume)>>10 ;

          // lfo2actualtest();



        }
        szamlalo++;
      }
      //gorbe leptetese ill leallitasa
      if (gorbetime[0] == maxtime) {
        gorbetime[0] = -1;
        // ptrnullaz2(0);
      } else {
        if (gorbetime[0] >= 0) {
          op1level[0] = op1gorbe[gorbetime[0]] * op1volume;
          op2level[0] = op2gorbe[gorbetime[0]] * op2volume ;
          op3level[0] = op3gorbe[gorbetime[0]] * op3volume ;
          op4level[0] = op4gorbe[gorbetime[0]] * op4volume ;
          op5level[0] = op5gorbe[gorbetime[0]] * op5volume ;
          op6level[0] = op6gorbe[gorbetime[0]] * op6volume  ;
          if (gorbetime[0] != maxrelease - 1)  //what is the fuck :) Key noteoff unlock it!
            gorbetime[0]++;
        }
      }
      if (gorbetime[1] == maxtime) {
        gorbetime[1] = -1;
        //ptrnullaz2(1);
      } else {
        if (gorbetime[1] >= 0) {


          op1level[1] = op1gorbe[gorbetime[1]] * op1volume ;
          op2level[1] = op2gorbe[gorbetime[1]] * op2volume ;
          op3level[1] = op3gorbe[gorbetime[1]] * op3volume ;
          op4level[1] = op4gorbe[gorbetime[1]] * op4volume ;
          op5level[1] = op5gorbe[gorbetime[1]] * op5volume ;
          op6level[1] = op6gorbe[gorbetime[1]] * op6volume ;
          if (gorbetime[1] != maxrelease - 1)
            gorbetime[1]++;
        }
      }
      if   (gorbetime[2] == maxtime) {
        gorbetime[2] = -1;
        //ptrnullaz2(2);
      } else {
        if (gorbetime[2] >= 0) {

          op1level[2] = op1gorbe[gorbetime[2]] * op1volume ;
          op2level[2] = op2gorbe[gorbetime[2]] * op2volume ;
          op3level[2] = op3gorbe[gorbetime[2]] * op3volume ;
          op4level[2] = op4gorbe[gorbetime[2]] * op4volume ;
          op5level[2] = op5gorbe[gorbetime[2]] * op5volume ;
          op6level[2] = op6gorbe[gorbetime[2]] * op6volume ;
          if (gorbetime[2] != maxrelease - 1)
            gorbetime[2]++;
        }
      }
      if (gorbetime[3] == maxtime) {
        gorbetime[3] = -1;
        //ptrnullaz2(3);
      } else {
        if (gorbetime[3] >= 0) {

          op1level[3] = op1gorbe[gorbetime[3]] * op1volume ;
          op2level[3] = op2gorbe[gorbetime[3]] * op2volume ;
          op3level[3] = op3gorbe[gorbetime[3]] * op3volume ;
          op4level[3] = op4gorbe[gorbetime[3]] * op4volume ;
          op5level[3] = op5gorbe[gorbetime[3]] * op5volume ;
          op6level[3] = op6gorbe[gorbetime[3]] * op6volume ;
          if (gorbetime[3] != maxrelease - 1)
            gorbetime[3]++;
        }
      }
      if (gorbetime[4] == maxtime) {
        gorbetime[4] = -1;
        // ptrnullaz2(4);
      } else {
        if (gorbetime[4] >= 0) {


          op1level[4] = op1gorbe[gorbetime[4]] * op1volume ;
          op2level[4] = op2gorbe[gorbetime[4]] * op2volume ;
          op3level[4] = op3gorbe[gorbetime[4]] * op3volume ;
          op4level[4] = op4gorbe[gorbetime[4]] * op4volume ;
          op5level[4] = op5gorbe[gorbetime[4]] * op5volume ;
          op6level[4] = op6gorbe[gorbetime[4]] * op6volume ;
          if (gorbetime[4] != maxrelease - 1)
            gorbetime[4]++;
        }
      }
      if (gorbetime[5] == maxtime) {
        gorbetime[5] = -1;
        //ptrnullaz2(5);
      } else {
        if (gorbetime[5] >= 0) {

          op1level[5] = op1gorbe[gorbetime[5]] * op1volume  ;
          op2level[5] = op2gorbe[gorbetime[5]] * op2volume ;
          op3level[5] = op3gorbe[gorbetime[5]] * op3volume ;
          op4level[5] = op4gorbe[gorbetime[5]] * op4volume ;
          op5level[5] = op5gorbe[gorbetime[5]] * op5volume;
          op6level[5] = op6gorbe[gorbetime[5]] * op6volume ;
          if (gorbetime[5] != maxrelease - 1)
            gorbetime[5]++;
        }
      }

      if (op1notefixed) { //invers logic? About speed!
        sinewave1freq = wavefreq[0] * op1generatorfreq ;
        sinewave2freq = wavefreq[1] * op1generatorfreq ;
        sinewave3freq = wavefreq[2] * op1generatorfreq ;
        sinewave4freq = wavefreq[3] * op1generatorfreq ;
        sinewave5freq = wavefreq[4] * op1generatorfreq ;
        sinewave6freq = wavefreq[5] * op1generatorfreq ;
        //sinewave7freq = wavefreq[6] * op1generatorfreq;
        //sinewave8freq = wavefreq[7] * op1generatorfreq;
      } else {
        sinewave1freq = op1generatorfreqfix * op1generatorfreq; //change after!!!! calculated before please, not here!!!
        sinewave2freq = sinewave1freq;
        sinewave3freq = sinewave1freq;
        sinewave4freq = sinewave1freq;
        sinewave5freq = sinewave1freq;
        sinewave6freq = sinewave1freq;
        //sinewave7freq = sinewave1freq;
        //sinewave8freq = sinewave1freq;
      }
      if (op2notefixed) {
        sinewave9freq = wavefreq[0] * op2generatorfreq;
        sinewave10freq = wavefreq[1] * op2generatorfreq;
        sinewave11freq = wavefreq[2] * op2generatorfreq;
        sinewave12freq = wavefreq[3] * op2generatorfreq;
        sinewave13freq = wavefreq[4] * op2generatorfreq;
        sinewave14freq = wavefreq[5] * op2generatorfreq;
        //sinewave15freq = wavefreq[6] * op2generatorfreq;
        //sinewave16freq = wavefreq[7] * op2generatorfreq;
      } else {
        sinewave9freq = op2generatorfreqfix * op2generatorfreq;
        sinewave10freq = sinewave9freq;
        sinewave11freq = sinewave9freq;
        sinewave12freq = sinewave9freq;
        sinewave13freq = sinewave9freq;
        sinewave14freq = sinewave9freq;
        //sinewave15freq = sinewave9freq;
        //sinewave16freq = sinewave9freq;
      }
      if (op3notefixed) {
        sinewave17freq = wavefreq[0] * op3generatorfreq;
        sinewave18freq =  wavefreq[1] * op3generatorfreq;
        sinewave19freq =  wavefreq[2] * op3generatorfreq;
        sinewave20freq =  wavefreq[3] * op3generatorfreq;
        sinewave21freq =  wavefreq[4] * op3generatorfreq;
        sinewave22freq =  wavefreq[5] * op3generatorfreq;
        //sinewave23freq = wavefreq[6] * op3generatorfreq;
        //sinewave24freq = wavefreq[7] * op3generatorfreq;
      } else {
        sinewave17freq = op3generatorfreqfix * op3generatorfreq;
        sinewave18freq = sinewave17freq;
        sinewave19freq = sinewave17freq;
        sinewave20freq = sinewave17freq;
        sinewave21freq = sinewave17freq;
        sinewave22freq = sinewave17freq;
        //sinewave23freq = sinewave17freq;
        //sinewave24freq = sinewave17freq;
      }
      if (op4notefixed) {
        sinewave25freq = wavefreq[0] * op4generatorfreq;
        sinewave26freq = wavefreq[1] * op4generatorfreq;
        sinewave27freq = wavefreq[2] * op4generatorfreq;
        sinewave28freq = wavefreq[3] * op4generatorfreq;
        sinewave29freq = wavefreq[4] * op4generatorfreq;
        sinewave30freq = wavefreq[5] * op4generatorfreq;
        //sinewave31freq = wavefreq[6] * op4generatorfreq;
        //sinewave32freq = wavefreq[7] * op4generatorfreq;
      } else {
        sinewave25freq = op4generatorfreqfix * op4generatorfreq;
        sinewave26freq = sinewave25freq;
        sinewave27freq = sinewave25freq;
        sinewave28freq = sinewave25freq;
        sinewave29freq = sinewave25freq;
        sinewave30freq = sinewave25freq;
        //sinewave31freq = sinewave25freq;
        //sinewave32freq =  sinewave25freq;
      }
      if (op5notefixed) {
        sinewave33freq = wavefreq[0] * op5generatorfreq;
        sinewave34freq = wavefreq[1] * op5generatorfreq;
        sinewave35freq = wavefreq[2] * op5generatorfreq;
        sinewave36freq = wavefreq[3] * op5generatorfreq;
        sinewave37freq = wavefreq[4] * op5generatorfreq;
        sinewave38freq = wavefreq[5] * op5generatorfreq;
        // sinewave39freq = wavefreq[6] * op5generatorfreq;
        //sinewave40freq = wavefreq[7] * op5generatorfreq;
      } else {
        sinewave33freq = op5generatorfreqfix * op5generatorfreq;
        sinewave34freq =  sinewave33freq;
        sinewave35freq =  sinewave33freq;
        sinewave36freq =  sinewave33freq;
        sinewave37freq =  sinewave33freq;
        sinewave38freq =  sinewave33freq;
        //sinewave39freq = sinewave33freq;
        //sinewave40freq = sinewave33freq;
      }
      if (op6notefixed) {
        sinewave41freq = wavefreq[0] * op6generatorfreq;
        sinewave42freq = wavefreq[1] * op6generatorfreq;
        sinewave43freq = wavefreq[2] * op6generatorfreq;
        sinewave44freq = wavefreq[3] * op6generatorfreq;
        sinewave45freq = wavefreq[4] * op6generatorfreq;
        sinewave46freq = wavefreq[5] * op6generatorfreq;
        // sinewave47freq = wavefreq[6] * op6generatorfreq;
        // sinewave48freq = wavefreq[7] * op6generatorfreq;
      } else {
        sinewave41freq = op6generatorfreqfix * op6generatorfreq;
        sinewave42freq = sinewave41freq;
        sinewave43freq = sinewave41freq;
        sinewave44freq = sinewave41freq;
        sinewave45freq = sinewave41freq;
        sinewave46freq = sinewave41freq;
        // sinewave47freq = sinewave41freq;
        //sinewave48freq =  sinewave41freq;
      }
      //picheg
      switch (op1pich) {
        case 0:
          pich[1] = op1detune;//detune??? and before calculatid proginit!
          pich[2] = op1detune;
          pich[3] = op1detune;
          pich[4] = op1detune;
          pich[5] = op1detune;
          pich[6] = op1detune;
          break;
        case 1:
          pich[1] = pichgorbe[gorbetime[0]] * picheglevel;
          pich[2] = pichgorbe[gorbetime[1]] * picheglevel;
          pich[3] = pichgorbe[gorbetime[2]] * picheglevel;
          pich[4] = pichgorbe[gorbetime[3]] * picheglevel;
          pich[5] = pichgorbe[gorbetime[4]] * picheglevel;
          pich[6] = pichgorbe[gorbetime[5]] * picheglevel;
          break;
        case 2:
          pich[1] = ~(pichgorbe[gorbetime[0]] * picheglevel - 1);
          pich[2] = ~(pichgorbe[gorbetime[1]] * picheglevel - 1);
          pich[3] = ~(pichgorbe[gorbetime[2]] * picheglevel - 1);
          pich[4] = ~(pichgorbe[gorbetime[3]] * picheglevel - 1);
          pich[5] = ~(pichgorbe[gorbetime[4]] * picheglevel - 1);
          pich[6] = ~(pichgorbe[gorbetime[5]] * picheglevel - 1);
          break;
      }
      switch (op2pich) {
        case 0:
          pich[9] = op2detune;
          pich[10] = op2detune;
          pich[11] = op2detune;
          pich[12] = op2detune;
          pich[13] = op2detune;
          pich[14] = op2detune;
          break;
        case 1:
          pich[9]  = pichgorbe[gorbetime[0]] * picheglevel;
          pich[10] = pichgorbe[gorbetime[1]] * picheglevel;
          pich[11] = pichgorbe[gorbetime[2]] * picheglevel;
          pich[12] = pichgorbe[gorbetime[3]] * picheglevel;
          pich[13] = pichgorbe[gorbetime[4]] * picheglevel;
          pich[14] = pichgorbe[gorbetime[5]] * picheglevel;
          break;
        case 2:
          pich[9]  = ~(pichgorbe[gorbetime[0]] * picheglevel - 1);
          pich[10] = ~(pichgorbe[gorbetime[1]] * picheglevel - 1);
          pich[11] = ~(pichgorbe[gorbetime[2]] * picheglevel - 1);
          pich[12] = ~(pichgorbe[gorbetime[3]] * picheglevel - 1);
          pich[13] = ~(pichgorbe[gorbetime[4]] * picheglevel - 1);
          pich[14] = ~(pichgorbe[gorbetime[5]] * picheglevel - 1);
          break;
      }
      switch (op3pich) {
        case 0:
          pich[17] = op3detune;
          pich[18] = op3detune;
          pich[19] = op3detune;
          pich[20] = op3detune;
          pich[21] = op3detune;
          pich[22] = op3detune;
          break;
        case 1:
          pich[17] = pichgorbe[gorbetime[0]] * picheglevel;
          pich[18] = pichgorbe[gorbetime[1]] * picheglevel;
          pich[19] = pichgorbe[gorbetime[2]] * picheglevel;
          pich[20] = pichgorbe[gorbetime[3]] * picheglevel;
          pich[21] = pichgorbe[gorbetime[4]] * picheglevel;
          pich[22] = pichgorbe[gorbetime[5]] * picheglevel;
          break;
        case 2:
          pich[17] = ~(pichgorbe[gorbetime[0]] * picheglevel - 1);
          pich[18] = ~(pichgorbe[gorbetime[1]] * picheglevel - 1);
          pich[19] = ~(pichgorbe[gorbetime[2]] * picheglevel - 1);
          pich[20] = ~(pichgorbe[gorbetime[3]] * picheglevel - 1);
          pich[21] = ~(pichgorbe[gorbetime[4]] * picheglevel - 1);
          pich[22] = ~(pichgorbe[gorbetime[5]] * picheglevel - 1);
          break;
      }
      switch (op4pich) {
        case 0:
          pich[25] = op4detune;
          pich[26] = op4detune;
          pich[27] = op4detune;
          pich[28] = op4detune;
          pich[29] = op4detune;
          pich[30] = op4detune;
          break;
        case 1:
          pich[25] = pichgorbe[gorbetime[0]] * picheglevel;
          pich[26] = pichgorbe[gorbetime[1]] * picheglevel;
          pich[27] = pichgorbe[gorbetime[2]] * picheglevel;
          pich[28] = pichgorbe[gorbetime[3]] * picheglevel;
          pich[29] = pichgorbe[gorbetime[4]] * picheglevel;
          pich[30] = pichgorbe[gorbetime[5]] * picheglevel;
          break;
        case 2:
          pich[25] = ~(pichgorbe[gorbetime[0]] * picheglevel - 1);
          pich[26] = ~(pichgorbe[gorbetime[1]] * picheglevel - 1);
          pich[27] = ~(pichgorbe[gorbetime[2]] * picheglevel - 1);
          pich[28] = ~(pichgorbe[gorbetime[3]] * picheglevel - 1);
          pich[29] = ~(pichgorbe[gorbetime[4]] * picheglevel - 1);
          pich[30] = ~(pichgorbe[gorbetime[5]] * picheglevel - 1);
          break;
      }
      switch (op5pich) {
        case 0:
          pich[33] = op5detune;
          pich[34] = op5detune;
          pich[35] = op5detune;
          pich[36] = op5detune;
          pich[37] = op5detune;
          pich[38] = op5detune;
          break;
        case 1:
          pich[33] = pichgorbe[gorbetime[0]] * picheglevel;
          pich[34] = pichgorbe[gorbetime[1]] * picheglevel;
          pich[35] = pichgorbe[gorbetime[2]] * picheglevel;
          pich[36] = pichgorbe[gorbetime[3]] * picheglevel;
          pich[37] = pichgorbe[gorbetime[4]] * picheglevel;
          pich[38] = pichgorbe[gorbetime[5]] * picheglevel;
          break;
        case 2:
          pich[33] = ~(pichgorbe[gorbetime[0]] * picheglevel - 1);
          pich[34] = ~(pichgorbe[gorbetime[1]] * picheglevel - 1);
          pich[35] = ~(pichgorbe[gorbetime[2]] * picheglevel - 1);
          pich[36] = ~(pichgorbe[gorbetime[3]] * picheglevel - 1);
          pich[37] = ~(pichgorbe[gorbetime[4]] * picheglevel - 1);
          pich[38] = ~(pichgorbe[gorbetime[5]] * picheglevel - 1);
          break;
      }
      switch (op6pich) {
        case 0:
          pich[41] = op6detune;
          pich[42] = op6detune;
          pich[43] = op6detune;
          pich[44] = op6detune;
          pich[45] = op6detune;
          pich[46] = op6detune;
          break;
        case 1:
          pich[41] = pichgorbe[gorbetime[0]] * picheglevel;
          pich[42] = pichgorbe[gorbetime[1]] * picheglevel;
          pich[43] = pichgorbe[gorbetime[2]] * picheglevel;
          pich[44] = pichgorbe[gorbetime[3]] * picheglevel;
          pich[45] = pichgorbe[gorbetime[4]] * picheglevel;
          pich[46] = pichgorbe[gorbetime[5]] * picheglevel;
          break;
        case 2:
          pich[41] = ~(pichgorbe[gorbetime[0]] * picheglevel - 1);
          pich[42] = ~(pichgorbe[gorbetime[1]] * picheglevel - 1);
          pich[43] = ~(pichgorbe[gorbetime[2]] * picheglevel - 1);
          pich[44] = ~(pichgorbe[gorbetime[3]] * picheglevel - 1);
          pich[45] = ~(pichgorbe[gorbetime[4]] * picheglevel - 1);
          pich[46] = ~(pichgorbe[gorbetime[5]] * picheglevel - 1);
          break;
      }
    }
    for ( bufferindex = 0; bufferindex < buffermeret; bufferindex++) {
      bufferbe = 0;
      if ((bufferindex & 0x0001) == 1) {
        //Left
        switch (alg) {
          //4op a+b+c+d
          case 1:
            if (gorbetime[0] > -1 ) {
              bufferbe +=   egyopgenA(sinewaveptr[1] + egyopgenB(sinewaveptr[9] + egyopgenC(sinewaveptr[17] + egyopgenD(sinewaveptr[25], op4level[0], op4lep), op3level[0], op3lep), op2level[0], op2lep), op1level[0], op1lep);
            }
            if (gorbetime[1] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[2] + egyopgenB(sinewaveptr[10] + egyopgenC(sinewaveptr[18] + egyopgenD(sinewaveptr[26], op4level[1], op4lep), op3level[1], op3lep), op2level[1], op2lep), op1level[1], op1lep);
            }
            if (gorbetime[2] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[3] + egyopgenB(sinewaveptr[11] + egyopgenC(sinewaveptr[19] + egyopgenD(sinewaveptr[27], op4level[2], op4lep), op3level[2], op3lep), op2level[2], op2lep), op1level[2], op1lep);
            }
            if (gorbetime[3] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[4] + egyopgenB(sinewaveptr[12] + egyopgenC(sinewaveptr[20] + egyopgenD(sinewaveptr[28], op4level[3], op4lep), op3level[3], op3lep), op2level[3], op2lep), op1level[3], op1lep);
            }
            if (gorbetime[4] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[5] + egyopgenB(sinewaveptr[13] + egyopgenC(sinewaveptr[21] + egyopgenD(sinewaveptr[29], op4level[4], op4lep), op3level[4], op3lep), op2level[4], op2lep), op1level[4], op1lep);
            }
            if (gorbetime[5] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[6] + egyopgenB(sinewaveptr[14] + egyopgenC(sinewaveptr[22] + egyopgenD(sinewaveptr[30], op4level[5], op2lep), op3level[5], op3lep), op2level[5], op2lep), op1level[5], op1lep);
            }
            break;
          //algoritmus1vege
          //algoritmus2
          case 2:
            //A-B/F C-D

            if (gorbetime[0] > -1 ) {
              average = (old0[0] + old1[0]) >> 1;
              old1[0] = old0[0];
              //old0[0] = egyopgenB(sinewaveptr[9] + (average << feedbacklevel), op2level[0], op2lep);
              old0[0] =  egyopgenA(sinewaveptr[1] - egyopgenB(sinewaveptr[9] + (average << feedbacklevel), op2level[0], op2lep), op1level[0], op1lep);
              bufferbe +=  old0[0];
              //   bufferbe +=   egyopgenA(sinewaveptr[1] + old0[0], op1level[0], op1lep);
              // bufferbe +=   egyopgenA(sinewaveptr[1] + egyopgenB(sinewaveptr[9], op2level[0], op2lep), op1level[0], op1lep);
              bufferbe +=   egyopgenC(sinewaveptr[17] - egyopgenD(sinewaveptr[25], op4level[0], op4lep), op3level[0], op3lep);
            }

            if (gorbetime[1] > -1) {
              average = (old0[1] + old1[1]) >> 1;
              old1[1] = old0[1];
              // old0[1] = egyopgenB(sinewaveptr[10] + (average << feedbacklevel), op2level[1], op2lep);
              old0[1] = egyopgenA(sinewaveptr[2] - egyopgenB(sinewaveptr[10] + (average << feedbacklevel), op2level[1], op2lep), op1level[1], op1lep);
              bufferbe +=  old0[1];
              //  bufferbe +=   egyopgenA(sinewaveptr[2] + old0[1], op1level[1], op1lep);
              // bufferbe +=   egyopgenA(sinewaveptr[2] + egyopgenB(sinewaveptr[10], op2level[1], op2lep), op1level[1], op1lep);
              bufferbe +=   egyopgenC(sinewaveptr[18] - egyopgenD(sinewaveptr[26], op4level[1], op4lep), op3level[1], op3lep);
            }

            if (gorbetime[2] > -1) {
              average = (old0[2] + old1[2]) >> 1;
              old1[2] = old0[2];
              // old0[2] = egyopgenB(sinewaveptr[11] + (average << feedbacklevel), op2level[2], op2lep);
              old0[2] = egyopgenA(sinewaveptr[3] - egyopgenB(sinewaveptr[11] + (average << feedbacklevel), op2level[2], op2lep), op1level[2], op1lep);
              bufferbe +=  old0[2];
              // bufferbe +=   egyopgenA(sinewaveptr[3] + old0[2], op1level[2], op1lep);
              //    bufferbe +=   egyopgenA(sinewaveptr[3] + egyopgenB(sinewaveptr[11], op2level[2], op2lep), op1level[2], op1lep);
              bufferbe +=   egyopgenC(sinewaveptr[19] - egyopgenD(sinewaveptr[27], op4level[2], op4lep), op3level[2], op3lep);
            }

            if (gorbetime[3] > -1) {
              average = (old0[3] + old1[3]) >> 1;
              old1[3] = old0[3];
              //old0[3] = egyopgenB(sinewaveptr[12] + (average << feedbacklevel), op2level[3], op2lep);
              old0[3] = egyopgenA(sinewaveptr[4] - egyopgenB(sinewaveptr[12] + (average << feedbacklevel), op2level[3], op2lep), op1level[3], op1lep);
              bufferbe +=  old0[3];
              // bufferbe +=   egyopgenA(sinewaveptr[4] + old0[3], op1level[3], op1lep);
              // bufferbe +=   egyopgenA(sinewaveptr[4] + egyopgenB(sinewaveptr[12], op2level[3], op2lep), op1level[3], op1lep);
              bufferbe +=   egyopgenC(sinewaveptr[20] - egyopgenD(sinewaveptr[28], op4level[3], op4lep), op3level[3], op3lep);
            }

            if (gorbetime[4] > -1) {
              average = (old0[4] + old1[4]) >> 1;
              old1[4] = old0[4];
              // old0[4] = egyopgenB(sinewaveptr[13] + (average << feedbacklevel), op2level[4], op2lep);
              old0[4] = egyopgenA(sinewaveptr[5] - egyopgenB(sinewaveptr[13] + (average << feedbacklevel), op2level[4], op2lep), op1level[4], op1lep);
              bufferbe +=  old0[4];
              // bufferbe +=   egyopgenA(sinewaveptr[5] + old0[4], op1level[4], op1lep);
              // bufferbe +=   egyopgenA(sinewaveptr[5] + egyopgenB(sinewaveptr[13], op2level[4], op2lep), op1level[4], op1lep);
              bufferbe +=   egyopgenC(sinewaveptr[21] - egyopgenD(sinewaveptr[29], op4level[4], op4lep), op3level[4], op3lep);
            }

            if (gorbetime[5] > -1) {
              average = (old0[5] + old1[5]) >> 1;
              old1[5] = old0[5];
              // old0[5] = egyopgenB(sinewaveptr[14] + (average << feedbacklevel), op2level[5], op2lep);
              old0[5] =  egyopgenA(sinewaveptr[6] - egyopgenB(sinewaveptr[14] + (average << feedbacklevel), op2level[5], op2lep), op1level[5], op1lep);
              bufferbe +=  old0[5];
              // bufferbe +=   egyopgenA(sinewaveptr[6] + old0[5], op1level[5], op1lep);
              // bufferbe +=   egyopgenA(sinewaveptr[6] + egyopgenB(sinewaveptr[14], op2level[5], op2lep), op1level[5], op1lep);
              bufferbe +=   egyopgenC(sinewaveptr[22] - egyopgenD(sinewaveptr[30], op4level[5], op4lep), op3level[5], op3lep);
            }

            break;
          //algoritmus3
          case 3:
            //A-B-C

            //this is fantastic!!!! very good quality clear sound!!!
            if (gorbetime[0] > 0 ) {
              bufferbe +=   egyopgenA(sinewaveptr[1] + egyopgenB(sinewaveptr[9] + egyopgenC(sinewaveptr[17], op3level[0], op3lep), op2level[0], op2lep), op1level[0], op1lep);
            }
            if (gorbetime[1] > 0) {
              bufferbe +=   egyopgenA(sinewaveptr[2] + egyopgenB(sinewaveptr[10] + egyopgenC(sinewaveptr[18], op3level[1], op3lep), op2level[1], op2lep), op1level[1], op1lep);
            }
            if (gorbetime[2] > 0) {
              bufferbe +=   egyopgenA(sinewaveptr[3] + egyopgenB(sinewaveptr[11] + egyopgenC(sinewaveptr[19], op3level[2], op3lep), op2level[2], op2lep), op1level[2], op1lep);
            }
            if (gorbetime[3] > 0) {
              bufferbe +=   egyopgenA(sinewaveptr[4] + egyopgenB(sinewaveptr[12] + egyopgenC(sinewaveptr[20], op3level[3], op3lep), op2level[3], op2lep), op1level[3], op1lep);
            }
            if (gorbetime[4] > 0) {
              bufferbe +=   egyopgenA(sinewaveptr[5] + egyopgenB(sinewaveptr[13] + egyopgenC(sinewaveptr[21], op3level[4], op3lep), op2level[4], op2lep), op1level[4], op1lep);
            }
            if (gorbetime[5] > 0) {
              bufferbe +=   egyopgenA(sinewaveptr[6] + egyopgenB(sinewaveptr[14] + egyopgenC(sinewaveptr[22], op3level[5], op3lep), op2level[5], op2lep), op1level[5], op1lep);
            }

            break;
          //algoritmus4
          case 4:
            if (gorbetime[0] > -1 ) {
              bufferbe +=   egyopgenA(sinewaveptr[1] + egyopgenB(sinewaveptr[9] , op2level[0], op2lep) + egyopgenC(sinewaveptr[17], op3level[0], op3lep), op1level[0], op1lep);
            }
            if (gorbetime[1] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[2] + egyopgenB(sinewaveptr[10] , op2level[1], op2lep) + egyopgenC(sinewaveptr[18], op3level[1], op3lep), op1level[1], op1lep);
            }
            if (gorbetime[2] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[3] + egyopgenB(sinewaveptr[11] , op2level[2], op2lep) + egyopgenC(sinewaveptr[19], op3level[2], op3lep), op1level[2], op1lep);
            }
            if (gorbetime[3] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[4] + egyopgenB(sinewaveptr[12] , op2level[3], op2lep) + egyopgenC(sinewaveptr[20], op3level[3], op3lep), op1level[3], op1lep);
            }
            if (gorbetime[4] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[5] + egyopgenB(sinewaveptr[13] , op2level[4], op2lep) + egyopgenC(sinewaveptr[21], op3level[4], op3lep), op1level[4], op1lep);
            }
            if (gorbetime[5] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[6] + egyopgenB(sinewaveptr[14] , op2level[5], op2lep) + egyopgenC(sinewaveptr[22], op3level[5], op3lep), op1level[5], op1lep);
            }
            break;
          case 5:


            if (gorbetime[0] > -1 ) {
              average = (old0[0] + old1[0]) >> 1;
              old1[0] = old0[0];
              old0[0] =   egyopgenA(sinewaveptr[1] + egyopgenB(sinewaveptr[9] + egyopgenC(sinewaveptr[17] + (average << feedbacklevel), op3level[0], op3lep), op2level[0], op2lep), op1level[0], op1lep);
              bufferbe +=  old0[0];
            }

            if (gorbetime[1] > -1) {
              average = (old0[1] + old1[1]) >> 1;
              old1[1] = old0[1];
              old0[1] =   egyopgenA(sinewaveptr[2] + egyopgenB(sinewaveptr[10] + egyopgenC(sinewaveptr[18] + (average << feedbacklevel), op3level[1], op3lep), op2level[1], op2lep), op1level[1], op1lep);
              bufferbe +=  old0[1];
            }
            if (gorbetime[2] > -1) {
              average = (old0[2] + old1[2]) >> 1;
              old1[2] = old0[2];
              old0[2] =   egyopgenA(sinewaveptr[3] + egyopgenB(sinewaveptr[11] + egyopgenC(sinewaveptr[19] + (average << feedbacklevel), op3level[2], op3lep), op2level[2], op2lep), op1level[2], op1lep);
              bufferbe +=  old0[2];
            }
            if (gorbetime[3] > -1) {
              average = (old0[3] + old1[3]) >> 1;
              old1[3] = old0[3];
              old0[3] =   egyopgenA(sinewaveptr[4] + egyopgenB(sinewaveptr[12] + egyopgenC(sinewaveptr[20] + (average << feedbacklevel), op3level[3], op3lep), op2level[3], op2lep), op1level[3], op1lep);
              bufferbe +=  old0[3];
            }
            if (gorbetime[4] > -1) {
              average = (old0[4] + old1[4]) >> 1;
              old1[4] = old0[4];
              old0[4] =   egyopgenA(sinewaveptr[5] + egyopgenB(sinewaveptr[13] + egyopgenC(sinewaveptr[21] + (average << feedbacklevel), op3level[4], op3lep), op2level[4], op2lep), op1level[4], op1lep);
              bufferbe +=  old0[4];
            }
            if (gorbetime[5] > -1) {
              average = (old0[5] + old1[5]) >> 1;
              old1[5] = old0[5];
              old0[5] =   egyopgenA(sinewaveptr[6] + egyopgenB(sinewaveptr[14] + egyopgenC(sinewaveptr[22] + (average << feedbacklevel), op3level[5], op3lep), op2level[5], op2lep), op1level[5], op1lep);
              bufferbe +=  old0[5];
            }
            break;
          case 6:
            //1op+feedback
            if (gorbetime[0] > -1 ) {
              average = (old0[0] + old1[0]) >> 1;
              old1[0] = old0[0];
              old0[0] = egyopgenA(sinewaveptr[1] + (average << feedbacklevel), op1level[0], op1lep);
              bufferbe +=  old0[0];
              // bufferbe +=   egyopgenA(sinewaveptr[1], op1level[0], op1lep);
              bufferbe +=   egyopgenB(sinewaveptr[9], op2level[0], op2lep);
              bufferbe +=   egyopgenC(sinewaveptr[17], op3level[0], op3lep);
            }
            if (gorbetime[1] > -1) {
              average = (old0[1] + old1[1]) >> 1;
              old1[1] = old0[1];
              old0[1] = egyopgenA(sinewaveptr[2] + (average << feedbacklevel), op1level[1], op1lep);
              bufferbe +=  old0[1];

              //bufferbe +=   egyopgenA(sinewaveptr[2] , op1level[1], op1lep);
              bufferbe +=   egyopgenB(sinewaveptr[10], op2level[1], op2lep);
              bufferbe +=   egyopgenC(sinewaveptr[18], op3level[1], op3lep);
            }
            if (gorbetime[2] > -1) {
              average = (old0[2] + old1[2]) >> 1;
              old1[2] = old0[2];
              old0[2] = egyopgenA(sinewaveptr[3] + (average << feedbacklevel), op1level[2], op1lep);
              bufferbe +=  old0[2];
              //  bufferbe +=   egyopgenA(sinewaveptr[3] , op1level[2], op1lep);
              bufferbe +=   egyopgenB(sinewaveptr[11], op2level[2], op2lep);
              bufferbe +=   egyopgenC(sinewaveptr[19], op3level[2], op3lep);

            }
            if (gorbetime[3] > -1) {
              average = (old0[3] + old1[3]) >> 1;
              old1[3] = old0[3];
              old0[3] = egyopgenA(sinewaveptr[4] + (average << feedbacklevel), op1level[3], op1lep);
              bufferbe +=  old0[3];
              //   bufferbe +=   egyopgenA(sinewaveptr[4] , op1level[3], op1lep);
              bufferbe +=   egyopgenB(sinewaveptr[12], op2level[3], op2lep);
              bufferbe +=   egyopgenC(sinewaveptr[20], op3level[3], op3lep);
            }
            if (gorbetime[4] > -1) {
              average = (old0[4] + old1[4]) >> 1;
              old1[4] = old0[4];
              old0[4] = egyopgenA(sinewaveptr[5] + (average << feedbacklevel), op1level[4], op1lep);
              bufferbe +=  old0[4];
              //  bufferbe +=   egyopgenA(sinewaveptr[5] , op1level[4], op1lep);
              bufferbe +=   egyopgenB(sinewaveptr[13], op2level[4], op2lep);
              bufferbe +=   egyopgenC(sinewaveptr[21], op3level[4], op3lep);
            }
            if (gorbetime[5] > -1) {
              average = (old0[5] + old1[5]) >> 1;
              old1[5] = old0[5];
              old0[5] = egyopgenA(sinewaveptr[6] + (average << feedbacklevel), op1level[5], op1lep);
              bufferbe +=  old0[5];
              //  bufferbe +=   egyopgenA(sinewaveptr[6] , op1level[5], op1lep);
              bufferbe +=   egyopgenB(sinewaveptr[14], op2level[5], op2lep);
              bufferbe +=   egyopgenC(sinewaveptr[22], op3level[5], op3lep);
            }
            break;
        }
        sinewaveptr[1] += sinewave1freq + pich[1];
        sinewaveptr[2] += sinewave2freq + pich[2];
        sinewaveptr[3] += sinewave3freq + pich[3];
        sinewaveptr[4] += sinewave4freq + pich[4];
        sinewaveptr[5] += sinewave5freq + pich[5];
        sinewaveptr[6] += sinewave6freq + pich[6];
        //   sinewaveptr[7] += sinewave7freq + pich[7];
        //   sinewaveptr[8] += sinewave8freq + pich[8];
        sinewaveptr[9] += sinewave9freq + pich[9];
        sinewaveptr[10] += sinewave10freq + pich[10];
        sinewaveptr[11] += sinewave11freq + pich[11];
        sinewaveptr[12] += sinewave12freq + pich[12];
        sinewaveptr[13] += sinewave13freq + pich[13];
        sinewaveptr[14] += sinewave14freq + pich[14];
        //    sinewaveptr[15] += sinewave15freq + pich[15];
        //     sinewaveptr[16] += sinewave16freq + pich[16];
        sinewaveptr[17] += sinewave17freq + pich[17];
        sinewaveptr[18] += sinewave18freq + pich[18];
        sinewaveptr[19] += sinewave19freq + pich[19];
        sinewaveptr[20] += sinewave20freq + pich[20];
        sinewaveptr[21] += sinewave21freq + pich[21];
        sinewaveptr[22] += sinewave22freq + pich[22];
        //   sinewaveptr[23] += sinewave23freq + pich[23];
        //   sinewaveptr[24] += sinewave24freq + pich[24];
        sinewaveptr[25] += sinewave25freq + pich[25];
        sinewaveptr[26] += sinewave26freq + pich[26];
        sinewaveptr[27] += sinewave27freq + pich[27] ;
        sinewaveptr[28] += sinewave28freq + pich[28];
        sinewaveptr[29] += sinewave29freq + pich[29];
        sinewaveptr[30] += sinewave30freq + pich[30] ;
        //      sinewaveptr[31] += sinewave31freq + pich[31];
        //      sinewaveptr[32] += sinewave32freq + pich[32];
        sinewaveptr[33] += sinewave33freq + pich[33];
        sinewaveptr[34] += sinewave34freq + pich[34];
        sinewaveptr[35] += sinewave35freq + pich[35];
        sinewaveptr[36] += sinewave36freq + pich[36];
        sinewaveptr[37] += sinewave37freq + pich[37];
        sinewaveptr[38] += sinewave38freq + pich[38];
        //     sinewaveptr[39] += sinewave39freq + pich[39];
        //     sinewaveptr[40] += sinewave40freq + pich[40];
        sinewaveptr[41] += sinewave41freq + pich[41];
        sinewaveptr[42] += sinewave42freq + pich[42];
        sinewaveptr[43] += sinewave43freq + pich[43];
        sinewaveptr[44] += sinewave44freq + pich[44];
        sinewaveptr[45] += sinewave45freq + pich[45];
        sinewaveptr[46] += sinewave46freq + pich[46];
        //     sinewaveptr[47] += sinewave47freq + pich[47];
        //     sinewaveptr[48] += sinewave48freq + pich[48];
        //     sinewaveptr[49] += sinewave49freq + pich[49];
        //     sinewaveptr[50] += sinewave50freq + pich[50];
        //     sinewaveptr[51] += sinewave51freq + pich[51] ;
        //      sinewaveptr[52] += sinewave52freq + pich[52];
        //     sinewaveptr[53] += sinewave53freq + pich[53];
        //      sinewaveptr[54] += sinewave54freq + pich[54] ;
        //LEVEL
        bufferbe = bufferbe >> level;
        //PARAMETEREQ
        if (parametereqlefton) {
          parametereqleft();
        }
        //DELAYLOWPASS
        if (delaylowpasseqlefton) {
          lowpassfilterleft();
        }
        //REVERB
        reverbleft();
        //HIGHPASSEQ
        if (highpasslefteqon) {
          highpasseqleft();
        }
        //LIMITER
        if (limiterlefton) {
          limiterleft();
        }
        buffer[ bufferindex] = bufferbe;
      }
      else {
        //Right
        switch (alg2) {
          case 1:
            if (gorbetime[0] > -1 ) {
              bufferbe +=   egyopgenE(sinewaveptr[33] + egyopgenF(sinewaveptr[41], op6level[0], op6lep), op5level[0], op5lep);
            }
            if (gorbetime[1] > -1) {
              bufferbe +=   egyopgenE(sinewaveptr[34] + egyopgenF(sinewaveptr[42], op6level[1], op6lep), op5level[1], op5lep);
            }
            if (gorbetime[2] > -1) {
              bufferbe +=   egyopgenE(sinewaveptr[35] + egyopgenF(sinewaveptr[43], op6level[2], op6lep), op5level[2], op5lep);
            }
            if (gorbetime[3] > -1) {
              bufferbe +=   egyopgenE(sinewaveptr[36] + egyopgenF(sinewaveptr[44], op6level[3], op6lep), op5level[3], op5lep);
            }
            if (gorbetime[4] > -1) {
              bufferbe +=   egyopgenE(sinewaveptr[37] + egyopgenF(sinewaveptr[45], op6level[4], op6lep), op5level[4], op5lep);
            }
            if (gorbetime[5] > -1) {
              bufferbe +=   egyopgenE(sinewaveptr[38] + egyopgenF(sinewaveptr[46], op6level[5], op6lep), op5level[5], op5lep);
            }



            break;
          case 2:
            int temp;
            byte tempgain;
            //under deployment 1op+limiter op6->limitgain op6lop-->outputlevel
            if (gorbetime[0] > -1 ) {
              tempgain = op6lep - 13;
              limitplus3 = op6level[0];
              limitminus3 = -limitplus3;
              temp =   egyopgenE(sinewaveptr[33], op5level[0], op5lep) << 4;
              if (temp > limitplus3) {
                temp = limitplus3;
              }
              if (temp < limitminus3) {
                temp = limitminus3;
              }
              bufferbe += temp << tempgain;
            }
            if (gorbetime[1] > -1) {
              tempgain = op6lep - 13;
              limitplus3 = op6level[1];
              limitminus3 = -limitplus3;
              temp =   egyopgenE(sinewaveptr[34] , op5level[1], op5lep) << 4;
              if (temp > limitplus3) {
                temp = limitplus3;
              }
              if (temp < limitminus3) {
                temp = limitminus3;
              }
              bufferbe += temp << tempgain;
            }
            if (gorbetime[2] > -1) {
              tempgain = op6lep - 13;
              limitplus3 = op6level[2];
              limitminus3 = -limitplus3;
              temp =   egyopgenE(sinewaveptr[35], op5level[2], op5lep) << 4;
              if (temp > limitplus3) {
                temp = limitplus3;
              }
              if (temp < limitminus3) {
                temp = limitminus3;
              }
              bufferbe += temp << tempgain;
            }
            if (gorbetime[3] > -1) {
              tempgain = op6lep - 13;
              limitplus3 = op6level[3];
              limitminus3 = -limitplus3;
              temp =   egyopgenE(sinewaveptr[36], op5level[3], op5lep) << 4;
              if (temp > limitplus3) {
                temp = limitplus3;
              }
              if (temp < limitminus3) {
                temp = limitminus3;
              }
              bufferbe += temp << tempgain;
            }
            if (gorbetime[4] > -1) {
              tempgain = op6lep - 13;
              limitplus3 = op6level[4];
              limitminus3 = -limitplus3;
              temp =   egyopgenE(sinewaveptr[37] , op5level[4], op5lep) << 4;
              if (temp > limitplus3) {
                temp = limitplus3;
              }
              if (temp < limitminus3) {
                temp = limitminus3;
              }
              bufferbe += temp << tempgain;
            }
            if (gorbetime[5] > -1) {
              tempgain = op6lep - 13;
              limitplus3 = op6level[5];
              limitminus3 = -limitplus3;
              temp =   egyopgenE(sinewaveptr[38] , op5level[5], op5lep) << 4;
              if (temp > limitplus3) {
                temp = limitplus3;
              }
              if (temp < limitminus3) {
                temp = limitminus3;
              }
              bufferbe += temp << tempgain;
            }

            break;
          case 3:
            if (gorbetime[0] > -1 ) {
              bufferbe +=   egyopgenA(sinewaveptr[1] + egyopgenB(sinewaveptr[9] + egyopgenC(sinewaveptr[17] + egyopgenD(sinewaveptr[25] + egyopgenE(sinewaveptr[33] + egyopgenF(sinewaveptr[41], op6level[0], op6lep), op5level[0], op5lep), op4level[0], op4lep), op3level[0], op3lep), op2level[0], op2lep), op1level[0], op1lep);
              //  bufferbe +=   egyopgenD(sinewaveptr[25] + egyopgenE(sinewaveptr[33] + egyopgenF(sinewaveptr[41], op6level[0], op6lep), op5level[0], op5lep), op4level[0], op4lep);
              //bufferbe +=   egyopgenE(sinewaveptr[33], op5level[0], op5lep);
              //bufferbe +=   egyopgenF(sinewaveptr[41], op6level[0], op6lep);
            }
            if (gorbetime[1] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[2] + egyopgenB(sinewaveptr[10] + egyopgenC(sinewaveptr[18] + egyopgenD(sinewaveptr[26] + egyopgenE(sinewaveptr[34] - egyopgenF(sinewaveptr[42], op6level[1], op6lep), op5level[1], op5lep), op4level[1], op4lep), op3level[1], op3lep), op2level[1], op2lep), op1level[1], op1lep);
              // bufferbe +=   egyopgenD(sinewaveptr[26] + egyopgenE(sinewaveptr[34] + egyopgenF(sinewaveptr[42], op6level[1], op6lep), op5level[1], op5lep), op4level[1], op4lep);
              // bufferbe +=   egyopgenE(sinewaveptr[34], op5level[1], op5lep);
              // bufferbe +=   egyopgenF(sinewaveptr[42], op6level[1], op6lep);
            }
            if (gorbetime[2] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[3] + egyopgenB(sinewaveptr[11] + egyopgenC(sinewaveptr[19] + egyopgenD(sinewaveptr[27] + egyopgenE(sinewaveptr[35] - egyopgenF(sinewaveptr[43], op6level[2], op6lep), op5level[2], op5lep), op4level[2], op4lep), op3level[2], op3lep), op2level[2], op2lep), op1level[2], op1lep);
              //bufferbe +=   egyopgenD(sinewaveptr[27] + egyopgenE(sinewaveptr[35] + egyopgenF(sinewaveptr[43], op6level[2], op6lep), op5level[2], op5lep), op4level[2], op4lep);
              // bufferbe +=   egyopgenE(sinewaveptr[35], op5level[2], op5lep);
              // bufferbe +=   egyopgenF(sinewaveptr[43], op6level[2], op6lep);
            }
            if (gorbetime[3] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[4] + egyopgenB(sinewaveptr[12] + egyopgenC(sinewaveptr[20] + egyopgenD(sinewaveptr[28] + egyopgenE(sinewaveptr[36] - egyopgenF(sinewaveptr[44], op6level[3], op6lep), op5level[3], op5lep), op4level[3], op4lep), op3level[3], op3lep), op2level[3], op2lep), op1level[3], op1lep);
              // bufferbe +=   egyopgenD(sinewaveptr[28] + egyopgenE(sinewaveptr[36] + egyopgenF(sinewaveptr[44], op6level[3], op6lep), op5level[3], op5lep), op4level[3], op4lep);
              //   bufferbe +=   egyopgenE(sinewaveptr[36], op5level[3], op5lep);
              //  bufferbe +=   egyopgenF(sinewaveptr[44], op6level[3], op6lep);
            }
            if (gorbetime[4] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[5] + egyopgenB(sinewaveptr[13] + egyopgenC(sinewaveptr[21] + egyopgenD(sinewaveptr[29] + egyopgenE(sinewaveptr[37] - egyopgenF(sinewaveptr[45], op6level[4], op6lep), op5level[4], op5lep), op4level[4], op4lep), op3level[4], op3lep), op2level[4], op2lep), op1level[4], op1lep);
              // bufferbe +=   egyopgenD(sinewaveptr[29] + egyopgenE(sinewaveptr[37] + egyopgenF(sinewaveptr[45], op6level[4], op6lep), op5level[4], op5lep), op4level[4], op4lep);
              // bufferbe +=   egyopgenE(sinewaveptr[37], op5level[4], op5lep);
              // bufferbe +=   egyopgenF(sinewaveptr[45], op6level[4], op6lep);
            }
            if (gorbetime[5] > -1) {
              bufferbe +=   egyopgenA(sinewaveptr[6] + egyopgenB(sinewaveptr[14] + egyopgenC(sinewaveptr[22] + egyopgenD(sinewaveptr[30] + egyopgenE(sinewaveptr[38] - egyopgenF(sinewaveptr[46], op6level[5], op6lep), op5level[5], op5lep), op4level[5], op2lep), op3level[5], op3lep), op2level[5], op2lep), op1level[5], op1lep);
              //bufferbe +=   egyopgenD(sinewaveptr[30] + egyopgenE(sinewaveptr[38] + egyopgenF(sinewaveptr[46], op6level[5], op6lep), op5level[5], op5lep), op4level[5], op4lep);
              //  bufferbe +=   egyopgenE(sinewaveptr[38], op5level[5], op5lep);
              //  bufferbe +=   egyopgenF(sinewaveptr[46], op6level[5], op6lep);
            }
            break;
          case 4:
            if (gorbetime[0] > -1 ) {
              bufferbe +=   egyopgenD(sinewaveptr[25] + egyopgenE(sinewaveptr[33] , op5level[0], op5lep) + egyopgenF(sinewaveptr[41], op6level[0], op6lep), op4level[0], op4lep);
            }
            if (gorbetime[1] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[26] + egyopgenE(sinewaveptr[34] , op5level[1], op5lep) + egyopgenF(sinewaveptr[42], op6level[1], op6lep), op4level[1], op4lep);
            }
            if (gorbetime[2] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[27] + egyopgenE(sinewaveptr[35] , op5level[2], op5lep) + egyopgenF(sinewaveptr[43], op6level[2], op6lep), op4level[2], op4lep);
            }
            if (gorbetime[3] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[28] + egyopgenE(sinewaveptr[36] , op5level[3], op5lep) + egyopgenF(sinewaveptr[44], op6level[3], op6lep), op4level[3], op4lep);
            }
            if (gorbetime[4] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[29] + egyopgenE(sinewaveptr[37] , op5level[4], op5lep) + egyopgenF(sinewaveptr[45], op6level[4], op6lep), op4level[4], op4lep);
            }
            if (gorbetime[5] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[30] + egyopgenE(sinewaveptr[38] , op5level[5], op5lep) + egyopgenF(sinewaveptr[46], op6level[5], op6lep), op4level[5], op4lep);
            }
            break;
          //algoritmus5 pwm
          case 5:
            if (gorbetime[0] > -1 ) {
              bufferbe +=   egyopgenD(sinewaveptr[25] + egyopgenE(sinewaveptr[33] + egyopgenF(sinewaveptr[41], op6level[0], op6lep), op5level[0], op5lep), op4level[0], op4lep);
              //bufferbe +=   egyopgenE(sinewaveptr[33], op5level[0], op5lep);
              //bufferbe +=   egyopgenF(sinewaveptr[41], op6level[0], op6lep);
            }
            if (gorbetime[1] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[26] + egyopgenE(sinewaveptr[34] + egyopgenF(sinewaveptr[42], op6level[1], op6lep), op5level[1], op5lep), op4level[1], op4lep);
              // bufferbe +=   egyopgenE(sinewaveptr[34], op5level[1], op5lep);
              // bufferbe +=   egyopgenF(sinewaveptr[42], op6level[1], op6lep);
            }
            if (gorbetime[2] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[27] + egyopgenE(sinewaveptr[35] + egyopgenF(sinewaveptr[43], op6level[2], op6lep), op5level[2], op5lep), op4level[2], op4lep);
              // bufferbe +=   egyopgenE(sinewaveptr[35], op5level[2], op5lep);
              // bufferbe +=   egyopgenF(sinewaveptr[43], op6level[2], op6lep);
            }
            if (gorbetime[3] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[28] + egyopgenE(sinewaveptr[36] + egyopgenF(sinewaveptr[44], op6level[3], op6lep), op5level[3], op5lep), op4level[3], op4lep);
              //   bufferbe +=   egyopgenE(sinewaveptr[36], op5level[3], op5lep);
              //  bufferbe +=   egyopgenF(sinewaveptr[44], op6level[3], op6lep);
            }
            if (gorbetime[4] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[29] + egyopgenE(sinewaveptr[37] + egyopgenF(sinewaveptr[45], op6level[4], op6lep), op5level[4], op5lep), op4level[4], op4lep);
              // bufferbe +=   egyopgenE(sinewaveptr[37], op5level[4], op5lep);
              // bufferbe +=   egyopgenF(sinewaveptr[45], op6level[4], op6lep);
            }
            if (gorbetime[5] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[30] + egyopgenE(sinewaveptr[38] + egyopgenF(sinewaveptr[46], op6level[5], op6lep), op5level[5], op5lep), op4level[5], op4lep);
              //  bufferbe +=   egyopgenE(sinewaveptr[38], op5level[5], op5lep);
              //  bufferbe +=   egyopgenF(sinewaveptr[46], op6level[5], op6lep);
            }

            break;
          case 6:
            if (gorbetime[0] > -1 ) {
              bufferbe +=   egyopgenD(sinewaveptr[25], op4level[0], op4lep);
              bufferbe +=   egyopgenE(sinewaveptr[33] + egyopgenF(sinewaveptr[41], op6level[0], op6lep), op5level[0], op5lep);
            }
            if (gorbetime[1] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[26], op4level[1], op4lep);
              bufferbe +=   egyopgenE(sinewaveptr[34] + egyopgenF(sinewaveptr[42], op6level[1], op6lep), op5level[1], op5lep);
            }
            if (gorbetime[2] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[27], op4level[2], op4lep);
              bufferbe +=   egyopgenE(sinewaveptr[35] + egyopgenF(sinewaveptr[43], op6level[2], op6lep), op5level[2], op5lep);
            }
            if (gorbetime[3] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[28], op4level[3], op4lep);
              bufferbe +=   egyopgenE(sinewaveptr[36] + egyopgenF(sinewaveptr[44], op6level[3], op6lep), op5level[3], op5lep);
            }
            if (gorbetime[4] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[29], op4level[4], op4lep);
              bufferbe +=   egyopgenE(sinewaveptr[37] + egyopgenF(sinewaveptr[45], op6level[4], op6lep), op5level[4], op5lep);
            }
            if (gorbetime[5] > -1) {
              bufferbe +=   egyopgenD(sinewaveptr[30], op4level[5], op4lep);
              bufferbe +=   egyopgenE(sinewaveptr[38] + egyopgenF(sinewaveptr[46], op6level[5], op6lep), op5level[5], op5lep);
            }
            break;
        }


        //LEVEL
        bufferbe = bufferbe >> level;
        //PARAMETEREQ
        if (parametereqrighton) {
          parametereqright();
        }
        //DELAYLOWPASS
        if (delaylowpasseqrighton) {
          lowpassfilterright();
        }
        //REVERB
        reverbright();
        //HIGHPASSEQ
        if (highpassrighteqon) {
          highpasseqright();
        }
        //LIMITER
        if (limiterrighton) {
          limiterright();
        }

        buffer[bufferindex] = bufferbe;
      }
    }
    i2s_write(I2S_PORT, &buffer,  bufferLen, &i2s_bytes_write, portMAX_DELAY);
  }
}

//NOTE START NULL INDEX
void ptrnullaz() {
  switch (generatornumber) {
    case 0:
      sinewaveptr[1] =  0;
      sinewaveptr[9] =  0;
      sinewaveptr[17] = 0;
      sinewaveptr[25] = 0;
      sinewaveptr[33] = 0;
      sinewaveptr[41] = 0;
      break;
    case 1:
      sinewaveptr[2] = 0;
      sinewaveptr[10] = 0;
      sinewaveptr[18] = 0;
      sinewaveptr[26] = 0;
      sinewaveptr[34] = 0;
      sinewaveptr[42] = 0;
      break;
    case 2:
      sinewaveptr[3] =  0;
      sinewaveptr[11] = 0;
      sinewaveptr[19] = 0;
      sinewaveptr[27] = 0;
      sinewaveptr[35] = 0;
      sinewaveptr[43] = 0;
      break;
    case 3:
      sinewaveptr[4] = 0;
      sinewaveptr[12] = 0;
      sinewaveptr[20] = 0;
      sinewaveptr[28] = 0;
      sinewaveptr[36] = 0;
      sinewaveptr[44] = 0;
      break;
    case 4:
      sinewaveptr[5] = 0;
      sinewaveptr[13] = 0;
      sinewaveptr[21] = 0;
      sinewaveptr[29] = 0;
      sinewaveptr[37] = 0;
      sinewaveptr[45] = 0;
      break;
    case 5:
      sinewaveptr[6] = 0;
      sinewaveptr[14] = 0;
      sinewaveptr[22] = 0;
      sinewaveptr[30] = 0;
      sinewaveptr[38] = 0;
      sinewaveptr[46] = 0;
      break;
  }
}

void ptrnullaz2(int generator) {
  switch (generator) {
    case 0:
      sinewaveptr[1] =  0;
      sinewaveptr[9] =  0;
      sinewaveptr[17] = 0;
      sinewaveptr[25] = 0;
      sinewaveptr[33] = 0;
      sinewaveptr[41] = 0;
      break;
    case 1:
      sinewaveptr[2] = 0;
      sinewaveptr[10] = 0;
      sinewaveptr[18] = 0;
      sinewaveptr[26] = 0;
      sinewaveptr[34] = 0;
      sinewaveptr[42] = 0;
      break;
    case 2:
      sinewaveptr[3] =  0;
      sinewaveptr[11] = 0;
      sinewaveptr[19] = 0;
      sinewaveptr[27] = 0;
      sinewaveptr[35] = 0;
      sinewaveptr[43] = 0;
      break;
    case 3:
      sinewaveptr[4] = 0;
      sinewaveptr[12] = 0;
      sinewaveptr[20] = 0;
      sinewaveptr[28] = 0;
      sinewaveptr[36] = 0;
      sinewaveptr[44] = 0;
      break;
    case 4:
      sinewaveptr[5] = 0;
      sinewaveptr[13] = 0;
      sinewaveptr[21] = 0;
      sinewaveptr[29] = 0;
      sinewaveptr[37] = 0;
      sinewaveptr[45] = 0;
      break;
    case 5:
      sinewaveptr[6] = 0;
      sinewaveptr[14] = 0;
      sinewaveptr[22] = 0;
      sinewaveptr[30] = 0;
      sinewaveptr[38] = 0;
      sinewaveptr[46] = 0;
      break;
  }
}

/*
  void korrekcio2() {
  op1generatorfreqfix = op1generatorfreqfix * 40000;
  op2generatorfreqfix = op2generatorfreqfix * 40000;
  op3generatorfreqfix = op3generatorfreqfix * 40000;
  op4generatorfreqfix = op4generatorfreqfix * 40000;
  op5generatorfreqfix = op5generatorfreqfix * 40000;
  op6generatorfreqfix = op6generatorfreqfix * 40000;
  volume = volume * 9;
  chorustime = chorustime * 26;
  arpeggiotime = arpeggiotime * 5;
  freq1 = freq1 * 100;
  freq2 = freq2 * 100;
  fixfreqstep = fixfreqstep * 40;
  picheglevel = picheglevel * 200;
  }
*/
//---------------------------TUNE----------------------------------

float c = 5230;
void hangokinit() {
  //oldhangolas
  /*
    int h = 10784;//10782,77
    int b = 10176;//10177,56
    int a = 9616;//9606,42
    int gisz = 9072;//9067,26
    int g = 8560;//8558,33
    int fisz = 8080;//8078,01
    int f = 7632;//7624,66
    int e = 7200;// 7196,73
    int disz = 6800; //6792,72
    int d = 6416;//6411,52
    int cisz = 6048; //5942,55
    int c = 5712;
    //int oszto2 = 10;
    //7-es
    int h = 10783;//10782,77
    int b = 10178;//10177,56
    int a = 9606;//9606,42
    int gisz = 9067;//9067,26
    int g = 8558;//8558,33
    int fisz = 8078;//8078,01
    int f = 7625;//7624,66
    int e = 7197;// 7196,73
    int disz = 6793; //6792,72
    int d = 6412;//6411,52
    int cisz = 6052; //6051,651716040021
    int c = 5712;
    //21,83272584945816
  */

  //6os-g
  /*
    int h = 10435;
    int b = 9850;
    int a = 9297;
    int gisz = 8775;
    int g = 8283;
    int fisz = 7818;
    int f = 7379;
    int e = 6965;
    int disz = 6574;
    int d = 6205;
    int cisz = 5857;
    int c = 5528;
    //21,83272584945816
    //5712->5528

  */
  //6os-jav

  /*
    uint16_t h = 12410;
    uint16_t b = 11714;
    uint16_t a = 11056;
    uint16_t gisz = 10435;
    uint16_t g = 9850;
    uint16_t fisz = 9297;
    uint16_t f = 8775;
    uint16_t e = 8283;
    uint16_t disz = 7818;
    uint16_t d = 7379;
    uint16_t cisz = 6965;
    uint16_t c = 6574;
    //21,83272584945816
    //5712->5528
  */


  // float c = 6574;
  float cisz = c * 1.0594631;
  float d = cisz * 1.0594631;
  float disz = d * 1.0594631;
  float e = disz * 1.0594631;
  float f = e * 1.0594631;
  float fisz = f * 1.0594631;
  float g = fisz * 1.0594631;
  float gisz = g * 1.0594631;
  float a = gisz * 1.0594631;
  float b = a * 1.0594631;
  float h = b * 1.0594631;




  //Tune global pitch
  int szorzo2 = szorzo;
  for (int i = 0; i < 127; i += 12)
  {
    noteertek[i] = round(c * szorzo2);
    noteertek[i + 1] = round(cisz * szorzo2);
    noteertek[i + 2] = round(d * szorzo2);
    noteertek[i + 3] = round(disz * szorzo2);
    noteertek[i + 4] = round(e * szorzo2);
    noteertek[i + 5] = round(f * szorzo2);
    noteertek[i + 6] = round(fisz * szorzo2);
    noteertek[i + 7] = round(g * szorzo2);
    noteertek[i + 8] = round(gisz * szorzo2);
    noteertek[i + 9] = round(a * szorzo2);
    noteertek[i + 10] = round(b * szorzo2);
    noteertek[i + 11] = round(h * szorzo2);
    szorzo2 *= 2;
  }


}

//SOUND INIT STEPS
void initprog() {
  //slow program cahanged !!!! default set lcd refresh (stepprogchanged=45)
  switch (stepprogchanged) {
    case 1:  generatorinitone(op1waveform, generator1); stepprogchanged++; break;
    case 2:  stepprogchanged++; break;
    case 3:  generatorinitone(op2waveform, generator2); stepprogchanged++; break;
    case 4:  stepprogchanged++; break;
    case 5:  generatorinitone(op3waveform, generator3); stepprogchanged++; break;
    case 6:  stepprogchanged++; break;
    case 7:  generatorinitone(op4waveform, generator4); stepprogchanged++; break;
    case 8:  stepprogchanged++; break;
    case 9:  generatorinitone(op5waveform, generator5); stepprogchanged++; break;
    case 10: stepprogchanged++; break;
    case 11: generatorinitone(op6waveform, generator6); stepprogchanged++; break;
    case 12: stepprogchanged++; break;
    case 13: pichgorbeinit(); stepprogchanged++; break;
    case 14: stepprogchanged++; break;
    case 15: hangokinit(); stepprogchanged++; break;
    case 16: stepprogchanged++; break;
    case 17: op1gorbeinit(); stepprogchanged++; break;
    case 18: stepprogchanged++; break;
    case 19: op2gorbeinit(); stepprogchanged++; break;
    case 20: stepprogchanged++; break;
    case 21: op3gorbeinit(); stepprogchanged++; break;
    case 22: stepprogchanged++; break;
    case 23: stepprogchanged++; break;
    case 24: stepprogchanged++; break;
    case 25: op4gorbeinit(); stepprogchanged++; break;
    case 26: stepprogchanged++; break;
    case 27: stepprogchanged++; break;
    case 28: stepprogchanged++; break;
    case 29: op5gorbeinit(); stepprogchanged++; break;
    case 30: stepprogchanged++; break;
    case 31: stepprogchanged++; break;
    case 32: stepprogchanged++; break;
    case 33: op6gorbeinit(); stepprogchanged++; break;
    case 34: stepprogchanged++; break;
    case 35: stepprogchanged++; break;
    case 36: stepprogchanged++; break;
    case 37: stepprogchanged++; break;
    case 38: stepprogchanged++; break;
    case 39: stepprogchanged++; break;
    case 40: stepprogchanged++; break;
    case 41: maxreleaseset(); stepprogchanged++; break;
    case 42: stepprogchanged++; break;
    case 43: stepprogchanged++; break;
    case 44: stepprogchanged++; break;
    case 45: lcdrefreesh(); break;
  }
}

#pragma GCC pop_options
// END Arduino Due fm polyphonic synthesizer by Robert Laszlo Kasza
